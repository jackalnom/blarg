<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Career &amp; Professional on BonnyCode</title>
    <link>https://www.bonnycode.com/categories/career--professional/</link>
    <description>Recent content in Career &amp; Professional on BonnyCode</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 16 Jul 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://www.bonnycode.com/categories/career--professional/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Are we cooked?</title>
      <link>https://www.bonnycode.com/posts/are-we-cooked/</link>
      <pubDate>Wed, 16 Jul 2025 00:00:00 +0000</pubDate>
      
      <guid>https://www.bonnycode.com/posts/are-we-cooked/</guid>
      <description>&lt;p&gt;My students frequently ask me what LLMs mean for them as future software developers and data scientists. With little exaggeration it often comes across something along the lines of &amp;ldquo;low-key, are we cooked?&amp;rdquo;. The last one, if you are not one of my students, translates in millennial to &amp;ldquo;good esteemed professor, tell me true, are we f#@ked?&amp;rdquo; While I&amp;rsquo;ve given various off-the-cuff answers, I feel inspired to be more thoughtful in putting down more complete thoughts.&lt;/p&gt;
&lt;h1 id=&#34;some-personal-background&#34;&gt;Some personal background&lt;/h1&gt;
&lt;p&gt;I want to start by giving a little personal history and just saying I understand the anxiety. I started my freshman year at CalPoly San Luis Obispo in Computer Science in September 1999. Like many of us older millennials that got into tech, I had been programming since elementary school (QBasic!) and computer science seemed a natural path. I always loved reading philosophy though and I seriously considered getting a philosophy degree instead. It was a choice between something I figured I was pretty decent at and could make money doing (computer science) and something that I was personally invested in but probably couldn&amp;rsquo;t make money with (philosophy). Earning a living won out over passion. I stuck with computer science, but I took as many philosophy classes as I could get into. To the extent that I was put on academic probation, not because my grades were too low, but because in the words of the admin &amp;ldquo;stop taking so many philosophy classes and just graduate!&amp;rdquo;. Good times…&lt;/p&gt;
&lt;p&gt;Within a year of starting my degree, the tech market fell out. March 2000, we saw the dotcom bust, and here I was a computer science student, kind of doing it for the money, kind of not, and my sure bet didn&amp;rsquo;t seem so sure anymore. We also saw a revival of the perennial bugaboo for American software developers: outsourcing. Every decade brought fresh panic that all programming jobs &lt;a href=&#34;https://developers.slashdot.org/story/04/10/15/1521231/us-programmers-an-endangered-species?sbsrc=thisday&#34;&gt;would&lt;/a&gt; &lt;a href=&#34;https://forio.com/about/blog/pitfalls-of-outsourcing-programmers/&#34;&gt;move&lt;/a&gt; to &lt;a href=&#34;https://www.nytimes.com/2003/12/07/business/business-who-wins-and-who-loses-as-jobs-move-overseas.html&#34;&gt;India&lt;/a&gt;, that American developers were too expensive, that we&amp;rsquo;d all be obsolete. I had to eat and had done a combination of construction and IT jobs up until that point and I was quickly burning through the savings I had built up from working. Luckily, I was able to convince one of my professors, Dr. Clint Staley, to whom I am forever grateful for many reasons, to let me interview for a startup he was running. Working that part-time while I went to school I was able to pay for myself, and momentum carried me forward to finishing my degree.&lt;/p&gt;
&lt;h1 id=&#34;are-we-cooked&#34;&gt;Are we cooked?&lt;/h1&gt;
&lt;p&gt;The best part about teaching in a university is you get to ramble. It is the single most defining characteristic of professors. But I&amp;rsquo;m sure at this point my students are asking: can you get to the point, are we cooked or not? I consider myself a skeptical optimist at heart. Meaning, I&amp;rsquo;m not inclined to believe that change is bad, but I&amp;rsquo;m also more cautious about predicting the future than others. Straightforwardly, that leads me to an answer of no, I don&amp;rsquo;t think you are cooked, but that doesn&amp;rsquo;t mean I can tell you with great certainty how things will play out. What I can do is point you towards the toolkit for how to make better decisions here.&lt;/p&gt;
&lt;h1 id=&#34;embracing-uncertainty&#34;&gt;Embracing uncertainty&lt;/h1&gt;
&lt;p&gt;Life is filled with uncertainty. Many people react irrationally to uncertainty, avoiding it too much or betting too much on luck. Learning how to deal rationally with uncertainty can give you an advantage throughout your life.&lt;/p&gt;
&lt;p&gt;From 2010 to 2016, I built and then led the supply chain and capacity planning systems for AWS Infrastructure. My biggest lesson is dollar for dollar, people are overly biased towards investing in prediction when they are often better suited to invest in flexibility. Time series forecasting tools take the past and extend it out to the future. The further out you go, the more variance you get. And black swan style events, like when &lt;a href=&#34;https://spectrum.ieee.org/the-lessons-of-thailands-flood&#34;&gt;Thailand becomes flooded&lt;/a&gt; and you lose a healthy portion of the world&amp;rsquo;s hard-drive manufacturing capacity, are not frequent enough to learn from in a predictable way. Better to get a good enough forecast, but instead focus on shortening your lead-times, making your supply fungible—meaning interchangeable and adaptable to different uses—and late-binding your decisions as much as possible.&lt;/p&gt;
&lt;p&gt;The parallel to career planning is direct. You can spend a lot of time trying to accurately predict where LLMs will take the industry and the job market. But that will quickly hit diminishing returns. I would instead approach the question from the other angle: what skills are most likely to be durable and fungible—that is, transferable and valuable across different contexts—in a wide variety of potential outcomes? Going whole hog into &amp;ldquo;I&amp;rsquo;m going to build my career around being a React developer&amp;rdquo; is betting on one very specific outcome. If it pays off, great, you can probably command a premium if you turn out to be one of the world&amp;rsquo;s best React developers. But what happens when React joins jQuery in the graveyard of once-essential frameworks?&lt;/p&gt;
&lt;h1 id=&#34;an-interlude-about-koalas&#34;&gt;An Interlude about Koalas&lt;/h1&gt;
&lt;p&gt;When I graduated from college, I went to work for Lawrence Livermore National Labs as a computer scientist. I was working on translating large-scale semantic graph algorithms into usable interfaces for intelligence analysts. I had personally received an award from the Secretary of Homeland Security. We had the academic freedom to explore whatever angles we wanted. There was little pressure to meet deadlines. It felt like a safe and secure job for life working in my little niche. My former professor and boss, Dr. Staley, called me up and said his new startup was just acquired by some struggling online bookseller called Amazon. I wasn&amp;rsquo;t super interested, as I could see existing in my current niche for my whole life.&lt;/p&gt;
&lt;p&gt;He convinced me to join by telling me a story about koalas. Koalas primarily subsist on eucalyptus leaves. Most other animals don&amp;rsquo;t eat eucalyptus, because they have little to no nutrition and they are kind of toxic. But koalas have built their entire evolutionary strategy around being the ones to eat eucalyptus leaves. This has been a great and successful strategy for koalas. But what happens if the eucalyptus forest goes away? Koalas are screwed. Does that mean koalas are actually in danger? No, but it does mean their fate is entirely bound to that one food source existing, while an animal like a rat can happily live and thrive in many ecosystems and is thus much more resistant to shocks in any given ecosystem.&lt;/p&gt;
&lt;p&gt;For some reason, that story convinced me to give Amazon a chance. Rather than focusing on a more niche area as defining &amp;ldquo;what I did&amp;rdquo; like &amp;ldquo;I&amp;rsquo;m the person who designs usability for mathematically intensive applications,&amp;rdquo; I instead built my career around solving hard technical problems regardless of the area.&lt;/p&gt;
&lt;h1 id=&#34;what-are-those-fungible-skills&#34;&gt;What are those fungible skills?&lt;/h1&gt;
&lt;p&gt;When I look back at the skills I learned in university, many of the specific technologies I learned never got used. I learned all about expert systems, but never built an expert system. I learned all about OpenGL, never used it. What I learned from my computer science courses that stuck was the more fundamental ideas of how to think about hard technical problems and create simple, workable solutions to them. For this reason, I often recommend to students who ask me which classes to take that it is more important to take a class that is difficult with a high degree of rigor that challenges you than to focus on any particular domain. Surprisingly, in retrospect, I&amp;rsquo;ve gotten as much use out of the philosophy classes I took—that CalPoly tried to kick me out for taking too many of—as I did my computer science classes. Learning critical thinking skills, how to navigate difficult ethical situations, how to communicate difficult ideas. When Amazon asked me to design a system that could fairly allocate scarce resources across competing teams, it wasn&amp;rsquo;t my coding skills that mattered most—it was my ability to think critically about the problem space and use data to understand and communicate trade-offs to executives who each thought their project was most important. What I&amp;rsquo;d say is my computer science skills were 95% of what initially got me in the door, but it was my liberal arts skills that dominated my later career.&lt;/p&gt;
&lt;p&gt;So my answer is, whatever you do, take on challenging problems, regardless of the area, so you can learn the meta-cognitive skills to understand how you learn and face up to these challenges. Learn critical thinking and how to tear apart problems to turn them from intractable to tractable. And don&amp;rsquo;t neglect the human-side of building your ability to communicate and deal ethically and fairly with others.&lt;/p&gt;
&lt;p&gt;Yes, LLMs are different from outsourcing or the dot-com bust. They can actually write code—not just cheaper, but instantaneously. And yes, I’ve seen the headlines: &lt;a href=&#34;https://www.washingtonpost.com/business/2025/03/14/programming-jobs-lost-artificial-intelligence/&#34;&gt;27% of programming jobs are gone&lt;/a&gt;, &lt;a href=&#34;https://wallstreetpit.com/127073-150k-software-engineer-turned-doordasher-after-800-ai-rejections/&#34;&gt;engineers facing hundreds of rejections&lt;/a&gt;. While I’m skeptical that this disruption is solely due to LLMs (e.g., a mix of post COVID overhiring, interest rate hikes, and broader economic shifts) there’s no doubt that a painful market correction is underway. But remember: every technological disruption feels unprecedented while it’s happening. The telephone operators watching automatic switches get installed thought their &lt;a href=&#34;https://thehistoryinsider.com/rise-fall-of-telephone-operators/&#34;&gt;world was ending&lt;/a&gt;. They were right about their specific job—wrong about their ability to adapt. The question isn’t whether LLMs will change things—they will. The question is whether you’ll be a koala or a rat when they do.&lt;/p&gt;
&lt;p&gt;So no, you&amp;rsquo;re not necessarily cooked. But you might be if you specialize too narrowly in whatever framework or language seems hot today. The jobs that are available will be different, and many of the existing software roles will not exist, at least in their current form. Build skills that transfer. Solve hard problems. Learn to think, not just code. The future needs people who can work with AI, not be replaced by it. And that future is built on the same foundation it always was: adaptability, critical thinking, and the uniquely human ability to navigate uncertainty with wisdom rather than fear.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A time to dream</title>
      <link>https://www.bonnycode.com/posts/a-time-to-dream/</link>
      <pubDate>Sun, 27 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://www.bonnycode.com/posts/a-time-to-dream/</guid>
      <description>&lt;p&gt;My success in life is based on my love and respect for daydreaming. I&amp;rsquo;ve always been a daydreamer. At the age of seven, I envisioned a space opera of powerful Lizians, Heart Monkeys and Star People who fought against the tyrannical Lizard Men. I loved this world and I visited every chance I got. I spent so much time fleshing out my world rather than school work that by the end of high school I had a written a truly intricate science fiction novel and I had the poor grades to show it. It was also an amazingly horrible novel. When I showed it to a girl I liked in high school, because high school chicks dig sci-fi authors, I couldn&amp;rsquo;t have anticipated the reaction, “I can&amp;rsquo;t believe you waste your time dreaming about stupid stuff like this.”&lt;/p&gt;
&lt;p&gt;To this day, I still waste most of my time “dreaming about stupid stuff.” Most of those dreams now involve my work rather than fantastical worlds, but the love is still there. I set aside several hours every week to dream about what could be. I sprawl out in these dreams, I linger, and I set no goals for myself in what I hope to accomplish. I ask myself, what would make this amazing? Why would that be amazing? What is the essence of amazingness? I go down every corridor, until I get to the essence of the problem and the solution. This isn&amp;rsquo;t work that can measured; this is my time to enjoy myself and untangle life&amp;rsquo;s truly difficult puzzles. It is during these times that I get excited about the potential of what could be.&lt;/p&gt;
&lt;p&gt;Without this time to dream, my work would have no direction. I would be subject to the whims of whomever is yelling the most at a particular moment or whatever crisis of the week has sprung up. Dreaming builds a vision and a vision creates purpose. When something urgent comes up, I can keep it in the context of whether it is truly more important than the great things I&amp;rsquo;ve envisioned.&lt;/p&gt;
&lt;p&gt;Where many other dreamers go wrong is their dreams stay dreams. I love my dreams, but I also respect them. That respect means that while I set aside time each week to dream, I spend the rest of my week making them happen. I temper my excitement for the amazingness of what could be by telling myself that greatness takes time. So I take the smallest step possible towards the dream that I can put into action. I then dream again the next week, but this time a smarter me is dreaming, informed by the realities of taking that small step forward. That smarter me comes up with an even better dream. Dream and reality march forward together as the work evolves, always daring to dream of perfection while letting reality take its time to get there. This constant cycle of vision and execution is what leads inevitably to success.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Bad Programmer</title>
      <link>https://www.bonnycode.com/posts/the-bad-programmer/</link>
      <pubDate>Sat, 13 Dec 2008 21:25:04 +0000</pubDate>
      
      <guid>https://www.bonnycode.com/posts/the-bad-programmer/</guid>
      <description>&lt;p&gt;Nick makes a &lt;a href=&#34;https://www.bonnycode.com/posts/in-defense-of-go-to/&#34;&gt;good argument&lt;/a&gt; for why go to should not be used. His closing argument is that zealous programmers will abuse go to. Pete makes a similar argument that go to has too much potential for abuse from programmers that we can&amp;rsquo;t be bothered to explain the use of to and you are better off banning them.&lt;/p&gt;
&lt;p&gt;It is a similar argument people make when arguing for gun restrictions. As the politicians will tell you, &amp;ldquo;Sure we trust you with a gun, but do you trust your neighbor or the guys from across town with them?&amp;rdquo;&lt;/p&gt;
&lt;p&gt;The difference though is that you have a lot of choice over who you work with. If you are limiting your choice of language or features based on the fact that you work with bad programmers I think you are trading off against the wrong factor. Do you want to work with bad programmers? Removing dangerous features from a language will certainly remove possibilities from bad programmers shooting themselves in the foot. They still won&amp;rsquo;t be good programmers though.&lt;/p&gt;
&lt;p&gt;How many bad programmers will you even work with? Companies tend to have fairly regular hiring standards, at least at any departmental level and in my experience good programmers tend to work in the same place and bad programmers equally congregate. Indeed, in &lt;a href=&#34;http://www.amazon.com/Peopleware-Productive-Projects-Teams-Second/dp/0932633439/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1229231876&amp;amp;sr=1-1&#34;&gt;PeopleWare&lt;/a&gt; they demonstrated a strong correlation between programming ability and the layout of the office where they worked. If there is a strong correlation between office layout and ability then programmers in the same office will have a strong correlation in programming ability amongst themselves.&lt;/p&gt;
&lt;p&gt;The boogeyman of bad programmers is a false threat to individual programmers. You are very likely only working with bad programmers if you are a bad programmer yourself. As a good programmer working with other good programmers, is go to still a bad idea?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Persistence: The long lost virtue of fixing a bug</title>
      <link>https://www.bonnycode.com/posts/persistence-the-long-lost-virtue-of-fixing-a-bug/</link>
      <pubDate>Sun, 23 Nov 2008 18:12:12 +0000</pubDate>
      
      <guid>https://www.bonnycode.com/posts/persistence-the-long-lost-virtue-of-fixing-a-bug/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;The heights by great men reached and kept&lt;br&gt;
Were not attained by sudden flight,&lt;br&gt;
But they, while their companions slept,&lt;br&gt;
Were toiling upward in the night.&lt;/p&gt;
&lt;p&gt;&amp;ndash; Henry Wadsworth Longfellow&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;You&amp;rsquo;re working on a difficult bug. A strange log message showing that your program fails every once in a while. Looking at your watch you see you&amp;rsquo;ve already been working on it for half an hour. You put the bug back on the router thinking to yourself maybe someone else will have better luck. And then a man from the future appears behind you&amp;hellip; oh never mind I won&amp;rsquo;t subject you to that torture &lt;a href=&#34;https://www.bonnycode.com/posts/do-not-fix-what-you-dont-understand/&#34;&gt;again&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;[&lt;img src=&#34;https://www.bonnycode.com/bug2hard.png&#34; alt=&#34;Developer_bug_conversation&#34;&gt;&lt;/p&gt;
&lt;p&gt;If you are like most software developers you&amp;rsquo;ve been in the situation above. Maybe instead you mark the bug as &amp;ldquo;Cannot Reproduce&amp;rdquo; or you instead assign it to your resident expert. Regardless of the means you use to escape from fixing the bug, you are dodging an important opportunity. This is normally when I start hearing the excuses. The bug is too hard. Someone else could fix it sooo much faster. There are too many bugs to waste time on just one. Forget the excuses, it is worth it both to you and the product you are creating. Oh let me count the ways.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You are actually learning something deep about the technology you work with. Sure the first time you are learning something you are slow. Really slow. But you are learning. You are dissecting the technology and learning how it really works. In the future with this deep knowledge you will be able to quickly solve problems. You are increasing your skill set as a developer which is good for the company you work for now and for your future marketability later. See Figure 1 below.&lt;/li&gt;
&lt;li&gt;You are wasting the time you spent getting up to speed on the problem. You pick up the bug, spend 30 minutes and then put it back on the router. The next person picks it up, spends 30 minutes and then puts it back on the router. yadda yadda. This is a huge waste of everyone&amp;rsquo;s time. The same if you mark it as cannot reproduce, but instead you are wasting the time of the customer or testers and then more developers later when they bring up the bug again in a new form.&lt;/li&gt;
&lt;li&gt;Not only is the bug noise on the router, it is also noise in the logs (hopefully you do have some means of tracking errors from your system). It is a common tradition in too many software shops to have their set of ignorable errors that just seem to happen and nobody really knows why but they seem fairly harmless so nobody fixes them. Not to say people didn&amp;rsquo;t try, I&amp;rsquo;m sure at least 5 people spent their 30 minutes on trying to fix it. Noise in the logs is not a good thing though. It could actually be a problem that will only manifest itself at an inopportune time. Even if it is genuinely harmless, it is still one more thing for humans to mentally parse and ignore and distracts away from seeing the real bugs.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;[&lt;img src=&#34;https://www.bonnycode.com/figure1.png&#34; alt=&#34;Figure1&#34;&gt;&lt;/p&gt;
&lt;p&gt;At this point you maybe be telling yourself &amp;ldquo;Great I&amp;rsquo;m going to fix all the bugs&amp;rdquo;. Look a null pointer exception, all I need is a little if statement null check and I&amp;rsquo;m good.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hold On!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Resist the urge to cut off the investigation early. Fixing the symptoms of a bug is NOT fixing the bug. Why is that variable null? Is it supposed to be nullable even? You must find the root cause even if it takes you 10 or 20 times longer. Treat the bug as if it was a memory corruption bug. You can try treating each of the various symptoms of the memory corruption and varied they will be. Or you can hit that one spot where it is actually occurring and fix it for good.&lt;/p&gt;
&lt;p&gt;The trade off is really this, you can either spend 2 days going deep, really understanding how something works and understanding the core of the issue, or you can spend the next month making tiny one off fixes that treat just the symptoms. In the end sticking with it and finding the real problem is 95% of the time more cost effective than just treating the symptoms. And speaking from experience, it is much more gratifying as well. Figure 2 shows a comparison between fixing the root cause and just fixing the first symptom you can patch over.&lt;br&gt;
[&lt;img src=&#34;https://www.bonnycode.com/figure2.png&#34; alt=&#34;Figure2&#34;&gt;&lt;/p&gt;
&lt;p&gt;Persistence does not equal stupidity. Banging your head against a problem and making no progress is not persistence anymore than running on a treadmill is a form of transportation. Well&amp;hellip; &lt;a href=&#34;http://www.heavy.com/video/61095&#34;&gt;not normally at least&lt;/a&gt;. I see lack of persistence as the biggest thing that holds people back, but many people don&amp;rsquo;t even know how to go about fixing the hard problems. It is a skill and I could go on about divide and conquer, how to actually use google and a million other tidbits. As an honest to goodness skill though, my best advice is to pair up with the best, most knowledgeable bug fixer you know. Who is the developer that ends up actually fixing the really hard problems when they come up? Tackle a really hard problem with them. When you get stuck on a really hard bug, don&amp;rsquo;t give up, but do ask for advice explaining your progress so far. Don&amp;rsquo;t ask them to do the work for you, but do ask for pointers on where to look next. Often times you&amp;rsquo;ll find the act of just explaining what you&amp;rsquo;ve discovered will lead you to the solution on your own.&lt;/p&gt;
&lt;p&gt;Remember this. Any script kiddie can copy and paste some code, tweak some values and get a system they barely understand to kinda work. If you want to distinguish yourself as a software developer, work to truly understand the system you are building, don&amp;rsquo;t shy away from the difficult problems and don&amp;rsquo;t stop until you really know what is going on.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Do not fix what you don&#39;t understand</title>
      <link>https://www.bonnycode.com/posts/do-not-fix-what-you-dont-understand/</link>
      <pubDate>Sun, 16 Nov 2008 23:31:44 +0000</pubDate>
      
      <guid>https://www.bonnycode.com/posts/do-not-fix-what-you-dont-understand/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s monday at 2pm and you are working on another bug report. It is a null pointer exception in a class you aren&amp;rsquo;t familiar with.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Nose&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;upYourNoseWithARubberHose&lt;/span&gt;(RubberHose hose) {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (hose.&lt;span style=&#34;color:#a6e22e&#34;&gt;diameter&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; 1 inch)  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      noseHose &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hose;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; HoseTooBigForNoseException();  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;....  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;*yawn*&lt;/p&gt;
&lt;p&gt;hose is null and a null pointer exception is thrown when accessing its diameter. At least this is an easy fix you think to yourself.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (hose &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; hose.&lt;span style=&#34;color:#a6e22e&#34;&gt;diameter&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; 1 inch)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Awesome&amp;hellip; bug fixed&amp;hellip; just need to commit. &amp;ldquo;Fixed NPE in upYourNoseWithARubberHose&amp;rdquo; you type into the comment box.&lt;/p&gt;
&lt;p&gt;Just before clicking the commit button a whooshing sound comes from behind you. Whirling around you see a huge man with a large gun.&lt;/p&gt;
&lt;p&gt;[&lt;img src=&#34;https://www.bonnycode.com/terminator.jpg&#34; alt=&#34;Arnold-schwarzenegger-the-terminator&#34;&gt;]&lt;/p&gt;
&lt;p&gt;&amp;ldquo;I&amp;rsquo;ve come from the future and I must stop your bug fix. You have no idea what will happen when you make this change. You didn&amp;rsquo;t reproduce the problem. You didn&amp;rsquo;t find the &lt;a href=&#34;http://en.wikipedia.org/wiki/Root_cause_analysis&#34;&gt;root cause&lt;/a&gt;. You didn&amp;rsquo;t talk to someone knowledgeable in this part of the code. You didn&amp;rsquo;t find the person who caused the bug and ask them about the fix. You didn&amp;rsquo;t even test your fix. I&amp;rsquo;m sorry but for the sake of the future I can&amp;rsquo;t let you commit that change.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;The man lowers the gun and fires.&lt;/p&gt;
&lt;p&gt;Your monitor disintegrates into a thousand shards of glass and plastic. Next he shoots your keyboard, the letter q smacks you in the forehead as it flies away from the carnage. Your brand new laser mouse is next. You begin to move your hand to shield it from the oversized rounds this future man is shooting but thinking again you pull it back just before he fires. Finally, he takes aim at your computer. At this point you&amp;rsquo;ve resigned yourself. This man has travelled back in time to stop you from checking in this horribly stupid bug fix and he means to finish the job. He fires and the hard drives spins for its last time.&lt;/p&gt;
&lt;p&gt;He turns and starts to walk away. Just as he exits the door though he turns and he shoots one of the wheels off your chair. Your chair slumps towards where the now missing wheel was throwing your body to one side. Future man smiles with a satisfaction that only comes from knowing one has done a thorough job. Future man wonders why you couldn&amp;rsquo;t have been as thorough in your own bug fixing in finding the root cause of the problem before carelessly throwing around fixes.&lt;/p&gt;
&lt;p&gt;As you sit in the carnage of your computer equipment, slanted to one side in your broken chair, smelling the still fresh smoke you think over what you learned today. The future man&amp;rsquo;s words echo in your brain&amp;hellip;&lt;br&gt;
&amp;ldquo;You have no idea what will happen when you make this change. You didn&amp;rsquo;t reproduce the problem. You didn&amp;rsquo;t find the root cause. You didn&amp;rsquo;t talk to someone knowledgeable in this part of the code. You didn&amp;rsquo;t find the person who caused the bug and ask them about the fix. You didn&amp;rsquo;t even test your fix.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Your left to ponder what future your simple bug fix had unintentionally caused that it would induce man to invent time travel to send someone back to stop you. Truly horrible it must have been and with that you promise in the name of the future man with the big gun to never make another bug fix on a problem that you don&amp;rsquo;t understand.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ninety Percent Confident</title>
      <link>https://www.bonnycode.com/posts/ninety-percent-confident/</link>
      <pubDate>Sun, 24 Aug 2008 21:38:25 +0000</pubDate>
      
      <guid>https://www.bonnycode.com/posts/ninety-percent-confident/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;I know nothing except the fact of my ignorance.&lt;/p&gt;
&lt;p&gt;&amp;ndash; Socrates&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Too many good software developers are limited by their poor estimation abilities. Take the story of Bert &amp;amp; Ernie. Bert &amp;amp; Ernie are pretty much identical in terms of programming ability. Put them in a programming contest and they are neck and neck. Bert regularly underestimates the amount of time his software projects will take while Ernie always beats his estimates with a slight bit of room to spare. Management sees Bert as either slow or just unfocused. Ernie on the other hand is a speedy professional programmer that can be trusted with the mission critical projects. I can think of few technical skills a software developer could learn that would better help their career than becoming a proficient estimator. The really amazing thing is, compared to most of what we do, the estimation asked of individual software developers is mostly about knowing your own limits.&lt;/p&gt;
&lt;p&gt;When Socrates was told that the Oracle of Delphi proclaimed him the wisest man in Athens, he made it a goal to prove of the Oracle wrong by finding someone wiser. When Socrates questions those who are known for their wisdom on their knowledge he found that they didn&amp;rsquo;t have the knowledge and wisdom that they pretended to. In the end Socrates found that he was the wisest in Athens, not because he knew the secret to life but because he knew the limits of his own knowledge.&lt;/p&gt;
&lt;p&gt;How poorly most people understand their limits is well illustrated in &lt;a href=&#34;http://www.amazon.com/Software-Estimation-Demystifying-Practices-Microsoft/dp/0735605351&#34;&gt;Software Estimation: Demystifying the Black Art&lt;/a&gt; by Steve McConnell. In a study, people are presented with 10 quiz questions on a variety of subjects such as the surface temperature of the sun or the worldwide box office receipts for Titanic. They are asked to provide a 90% confidence range for each question. In theory, most people should get 9 out of 10 questions right. In reality, the average number of correct answers was 2.8. It shouldn&amp;rsquo;t really matter if you have a good understanding of the domain, all you have to do is widen your range enough to compensate for you lack of knowledge. And yet, pretty much everyone is naturally resistant to doing this.&lt;/p&gt;
&lt;p&gt;For instance let&amp;rsquo;s say that I know very little about the surface temperature of the Sun or about temperature in general. When asked to get to a 90% confidence range for the surface temperature of the sun, I might have to reasonably answer 0 F to 1 billion F to get to a highly confident answer. That seems like both an absurd answer and like I&amp;rsquo;m not even trying. The problem is most people will tighten up their answer beyond the limits of their knowledge. Thus you end up with 90% confidence intervals for the surface temperature of the sun that consist of answers like 1000 F to 2000 F when it is actually 9980 F.&lt;/p&gt;
&lt;p&gt;There is some truth to our natural reaction about giving too wide of a range though. Telling your boss that your software feature will take you sometime between 1 day and 3 years will probably make your boss start to question why they hired you. This is natural considering that an estimate that wide is fairly useless when doing a cost benefit analysis on a feature or in attempting to create a schedule. You absolutely must resist the urge to provide a guess that goes beyond the limits of your knowledge though. Instead, ask for time to create a prototype or to do research and say that you can give a useful estimate once it is complete.&lt;/p&gt;
&lt;p&gt;This doesn&amp;rsquo;t mean you should ask to research every single estimate you give either. If you are 90% confident you can deliver a feature in 1 to 2 weeks, just say 2 weeks and call it done. The key is make sure that the estimate is actually something you are 90% confident in. If the last time you had a similar feature you ran into a multitude of problems, provide an estimate assuming that similar problems occur this time. Don&amp;rsquo;t listen to the Optimism Angel on your shoulder that tells you that everything is going to go smooth and that you are finally going to be the super fast programmer you always dreamed of being. Always look at past features you have written and compare the feature being estimated with those.&lt;/p&gt;
&lt;p&gt;There is a lot more to software estimation than what I have covered here. One of my favorite new estimation techniques is &lt;a href=&#34;http://en.wikipedia.org/wiki/Planning_poker&#34;&gt;Planning Poker&lt;/a&gt;. For the individual software developer doing feature estimation though, most of what you need is just figuring out 90% confident estimates.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
