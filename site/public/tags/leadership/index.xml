<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Leadership on BonnyCode</title>
    <link>https://www.bonnycode.com/tags/leadership/</link>
    <description>Recent content in Leadership on BonnyCode</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 30 Sep 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://www.bonnycode.com/tags/leadership/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The architecture of truth-seeking</title>
      <link>https://www.bonnycode.com/posts/architecture-of-truth-seeking/</link>
      <pubDate>Tue, 30 Sep 2025 00:00:00 +0000</pubDate>
      
      <guid>https://www.bonnycode.com/posts/architecture-of-truth-seeking/</guid>
      <description>&lt;p&gt;A brilliant executive I worked with hired a team of PhDs to automate a critical process deep in his organization. After a year, they delivered plans that were as beautiful as they were unworkable.&lt;/p&gt;
&lt;p&gt;So the manual decisions continued. At most, the team only glanced at the optimal plans. The leader would check in, demanding progress. The team kept saying &amp;ldquo;any day now, the model doesn&amp;rsquo;t work perfectly yet.&amp;rdquo; The leader grew more frustrated. The cycle continued, until finally, everyone just… pretended it all worked. When asked &amp;ldquo;are you using the new system?&amp;rdquo; they&amp;rsquo;d palter &amp;ldquo;yes&amp;rdquo;; technically it was true. They glanced at its output while making the decisions that made sense for the business.&lt;/p&gt;
&lt;p&gt;For years after, this executive would roll out this automation success story when teams in the rest of the company told him something wasn&amp;rsquo;t possible. And the manual team in his own organization kept quietly doing everything the old way. He never noticed. Or never asked. He had his success story, and that appears to be all he really needed.&lt;/p&gt;
&lt;p&gt;The original leader left. Eventually nearly everyone who was originally involved left. But like the Ship of Theseus, the web of lies was somehow maintained–each new person inheriting the fiction from the last.&lt;/p&gt;
&lt;p&gt;Until someone asked the obvious question: &amp;ldquo;Why isn&amp;rsquo;t this thing actually plugged in?&amp;rdquo;&lt;/p&gt;
&lt;p&gt;So they did what any smart person would do. They plugged it in.&lt;/p&gt;
&lt;p&gt;Disaster. It ordered all the wrong things: shortages and chaos. Immediate management&amp;rsquo;s post-mortem blamed &amp;ldquo;overly aggressive cost optimization.&amp;rdquo; The truth? The automated plan was more expensive and wrong. But the superiors above weren’t close enough to know that.&lt;/p&gt;
&lt;p&gt;The largest improvements I&amp;rsquo;ve seen in companies have often been mundane: fixing systems that ran on garbage data nobody knew was garbage. Truth doesn&amp;rsquo;t bubble up naturally; it has to be designed in. You need different teams in productive tension with each other. Without agonism (the structured contest-of-perspectives), even good people end up maintaining elaborate fictions.&lt;/p&gt;
&lt;h2 id=&#34;when-processes-drift-apart&#34;&gt;When processes drift apart&lt;/h2&gt;
&lt;p&gt;I saw this dynamic play out vividly at a place we&amp;rsquo;ll call the widget factory (for lack of a more creative way to anonymize). The goal was simple: shorten the lead-time for new widget capacity. What mattered wasn&amp;rsquo;t the average delivery time, but the P95 (95th percentile) lead-time. A reliable date they could build forecasts around. The shorter that lead-time, the less buffer capacity they required and in turn the greater their capital efficiency. That lead-time was originally around six months.&lt;/p&gt;
&lt;p&gt;The workflow was split between two teams (it was in actuality two dozen teams, but I’m simplifying): Delivery, who bought the widget machines, and Installation, who set them up.&lt;/p&gt;
&lt;p&gt;Management gave each team a simple mandate: get faster. Delivery was told to cut its P95 from five months to two. Installation, from two months to one week. On paper, they crushed their goals. Promotions and celebrations all around.&lt;/p&gt;
&lt;p&gt;Except for one problem: the customer&amp;rsquo;s total lead-time was growing. From six months, to seven, then eight. Even though P95 times don’t simply add (the worst 5% of cases rarely coincide), we expect the overall P95 to be lower than the sum of the sub-P95s. If the total P95 ends up much larger, that’s a sign our assumptions about independence, distribution shape, or what’s being measured are breaking down. When asked, each team pointed to their charts. &amp;ldquo;Don&amp;rsquo;t look at us,&amp;rdquo; they&amp;rsquo;d say. &amp;ldquo;Our numbers are going down.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;The truth was hiding in the gap between them: an unmeasured no-man’s-land. By tracing the entire workflow, from the customer’s order to the machine going online, we found both teams’ clocks had drifted further and further apart. Installation wouldn’t start their timer until labor was physically ready to swarm the machine, making their part look especially fast, especially when a large batch of deliveries occurred at the same time. Delivery would stop theirs based on a projected delivery ETA, not the actual arrival. This exempted them from shipping and material delays they felt were beyond their control. Each team&amp;rsquo;s clock was paused while the customer&amp;rsquo;s kept ticking.&lt;/p&gt;
&lt;p&gt;We joined the clocks. The moment Delivery marked a machine &lt;em&gt;delivered&lt;/em&gt;, Installation’s timer started, no exceptions. The data improved instantly because the teams were now interlocked; if a delivery was only real on paper, the Installation team raised hell. If a large batch of deliveries occurred, Installation either needed to staff for that peak or negotiate level-loading with the delivery team. The overall cycle time finally began to drop.&lt;/p&gt;
&lt;p&gt;A happy story, where everyone learned a valuable lesson for the future?&lt;/p&gt;
&lt;p&gt;If only.&lt;/p&gt;
&lt;p&gt;Nobody wanted to admit the earlier promotions and celebrations were based on illusions. So instead of owning the fix, leadership credited it to another high-profile project that was failing. On paper, this worked perfectly: the failing project suddenly looked successful, and no need for a &lt;em&gt;mea culpa&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The language justifying this sleight of hand was meticulously drafted to achieve two goals: 1) avoid being outright false, and 2) stay vague enough that nobody would ask the obvious questions.&lt;/p&gt;
&lt;p&gt;But as the story climbed the org chart, that deliberate phrasing was discarded. Higher-level executives, remembering only the original pitch, rewrote it into a neat success. What had started as a fuzzy misdirection hardened into a plain lie. By the time anyone noticed the mismatch, it was politically impossible to correct without admitting to the larger subterfuge. Truth wasn’t the only casualty. The chance to learn what actually works (and what doesn’t) died with it.&lt;/p&gt;
&lt;p&gt;This wasn’t an isolated case. The dramatic wins I see in companies are rarely about brilliance; they’re about avoiding something dumb. But nobody celebrates that. It’s better for your career to say you launched a fancy AI initiative than to admit you fixed an operation built on misconceptions. This is improvement laundering: when executives construct heroic fictions because the truth is too embarrassing.&lt;/p&gt;
&lt;h2 id=&#34;when-lies-are-cheap-and-truth-is-expensive&#34;&gt;When lies are cheap and truth is expensive&lt;/h2&gt;
&lt;p&gt;The same pattern shows up in today’s tech companies, where truth itself is supposed to be measured in data. In that world, data science has become a key arbiter of success. They interpret A/B test results and declare a product launch good-to-go. This creates a natural tension. When data scientists are centralized, product leaders complain they have to beg for resources. So, at one company I was at, a seemingly logical decision was made: embed data scientists directly into product teams.&lt;/p&gt;
&lt;p&gt;The predictable result? Methodological correctness left the building. The new incentive for the data scientists wasn&amp;rsquo;t to find the objective truth, but to deliver the messaging their management wanted to hear.&lt;/p&gt;
&lt;p&gt;This came to a head with a major product launch. The A/B test results were terrible. But for internal political reasons, the launch had to proceed. Product leaders were afraid Engineering would complain if they shipped with bad numbers, knowing they&amp;rsquo;d get blamed for the inevitable fallout.&lt;/p&gt;
&lt;p&gt;So, the embedded data scientists found a solution. They peeked and snapshotted the A/B test results less than a day after the experiment launched.&lt;/p&gt;
&lt;p&gt;They exploited a novelty effect. The new, confusing UX meant users initially spent more time on the page, pushing some engagement metrics into the green. It was a perfect, fleeting illusion of success. Within a week, of course, the test would turn deep red as frustrated users churned. But so long as you took a snapshot in those initial hours after release, you could declare success.
The data scientist was careful in how they presented results; an incomplete truth that balances on a particular phrasing: &amp;ldquo;Early results show an average treatment effect on time spent as 2% higher.&amp;rdquo; No mention that it&amp;rsquo;s a novelty effect or statistical significance.&lt;/p&gt;
&lt;p&gt;Then the falsehood evolved. The manager&amp;rsquo;s summary to leadership: &amp;ldquo;User signals are positive.&amp;rdquo; The VP&amp;rsquo;s report: &amp;ldquo;Users love the new feature.&amp;rdquo; Nobody exactly lied. The data scientist was misleading but never outright lied. The people who turned it into &amp;ldquo;users love this&amp;rdquo; weren&amp;rsquo;t lying either. It was a natural, if incorrect, conclusion based on the report they were given.&lt;/p&gt;
&lt;p&gt;An engineer, suspicious as to why the A/B test was suddenly green after so much time being red in earlier iterations, passed it to the central data science team. They immediately saw what was wrong. The A/B platform had guardrails against exactly these issues, but the embedded data scientists built custom notebooks that bypassed these safeguards in the name of flexibility. When the central data science team raised these issues, the conversation wasn&amp;rsquo;t &amp;ldquo;this is terrible&amp;rdquo; but &amp;ldquo;we&amp;rsquo;re all on the same team, anyone can make this mistake, is it even wrong? We aren&amp;rsquo;t playing gotcha here.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;This is how plausible deniability forms an immune system for falsehood. Nobody wants to assume malice for what can be explained by ignorance. Irrespective of intent though, when the mistakes are always in one direction, always toward what power wants to hear, the company develops antibodies against truth rather than lies.&lt;/p&gt;
&lt;p&gt;The asymmetry is brutal. Creating these falsehoods costs nothing; you&amp;rsquo;re reading the data through the right lens, being a team player. But catching them requires substantial investment: digging through data, understanding what really happened, often challenging what powerful people have already celebrated. By then, those in positions of power have staked their reputations on the success story. The correction comes with political cost, while creating the necessary fiction comes with promotion.&lt;/p&gt;
&lt;p&gt;When the balance of incentives tilts this way, the ability for an organization to generate reliable truth doesn&amp;rsquo;t only suffer. It dies. The wrong lessons are learned. Poor decisions compound. This isn’t the system failing. As perverse as it is, the system is working exactly as designed.&lt;/p&gt;
&lt;h2 id=&#34;designing-for-truth&#34;&gt;Designing for truth&lt;/h2&gt;
&lt;p&gt;If systems are working exactly as designed, the real question is: how do we design them differently?&lt;/p&gt;
&lt;p&gt;Truth follows the logic of a tragedy of the commons. The rational choice for any single person is to stay silent to protect themselves. But when everyone makes that same rational choice, the system breaks.&lt;/p&gt;
&lt;p&gt;The solution isn&amp;rsquo;t asking people to be heroes. It&amp;rsquo;s building systems where truth-telling isn&amp;rsquo;t an altruistic act. This requires what I called agonism earlier: structured tension between teams that makes comfortable fictions impossible to maintain.&lt;/p&gt;
&lt;p&gt;But not all tension creates truth. The stories above reveal the necessary conditions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Equal political standing.&lt;/strong&gt; When data scientists reported to product teams, they became an internal marketing department rather than independent peers. The asymmetry was brutal: creating falsehoods cost nothing while catching them required substantial investment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Interlocked accountability.&lt;/strong&gt; When the widget factory joined clocks together, neither team could retreat into convenient measurements. Their friction became productive only when success required confronting a shared reality.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Proximity to operations.&lt;/strong&gt; The automation fiction survived because the executive never descended to where decisions actually lived. The desire to tell narratives of success shouldn&amp;rsquo;t become a substitute for on-the-ground reality.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Protected truth-tellers.&lt;/strong&gt; If you want truth in your organization, truth-seeking should be incentivized rather than something that requires a warning label. Truth-telling should be rewarded, not punished.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most organizations are designed for comfort, consensus, and clean narratives. And they get exactly that. The rare few that get truth do so because they’ve made fiction more exhausting to maintain than truth. In those organizations, plausible deniability can’t form an immune system for falsehood. The cost of the lie finally exceeds the embarrassment of admitting it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Just people in a room</title>
      <link>https://www.bonnycode.com/posts/just-people-in-a-room/</link>
      <pubDate>Sat, 16 Aug 2025 00:00:00 +0000</pubDate>
      
      <guid>https://www.bonnycode.com/posts/just-people-in-a-room/</guid>
      <description>&lt;p&gt;In the early 2000s, I worked for a digital video processing startup that Autodesk acquired. We were merged with another acquisition. Our team became the developers, their team (the &amp;ldquo;others&amp;rdquo;) became management. The others were clueless. They didn&amp;rsquo;t understand the technical domain, our customers, or the product. Naturally, I hated them. Their meetings were always pointless; I learned to skip them. Their product plan was a disaster. We secretly built our own, supposedly better version. We believed once upper management saw how superior ours was, we&amp;rsquo;d finally get rid of the others and everything would be good again.&lt;/p&gt;
&lt;p&gt;One morning, we were all called into a conference room. I tried to skip, assuming it was another pointless meeting from the others, but HR said it was mandatory. Everyone was there. We were all laid off, effective immediately. The whole department shut down. Us, the others, everyone.&lt;/p&gt;
&lt;p&gt;All the hate and politics evaporated. We were just people sitting in a room together. I felt silly and embarrassed for how I&amp;rsquo;d felt moments before.&lt;/p&gt;
&lt;h1 id=&#34;how-do-you-know-you-arent-the-problem&#34;&gt;How do you know you aren&amp;rsquo;t the problem?&lt;/h1&gt;
&lt;p&gt;The most common source of frustration in my classes isn’t the material; it’s the group projects. A typical situation: Alice and Bob are in a group. Alice comes to me and says Bob isn’t pulling his weight. Bob comes to me separately and says Alice has taken control of the project and doesn’t leave room for anyone else. Could they resolve this if they talked to each other? Possibly. Do they, without serious prompting? No.&lt;/p&gt;
&lt;p&gt;So how do we know when our conflicts with others are just misunderstandings? How do we know when we’re in the right or when we’re the ones causing harm? These are tough theory-of-knowledge and interpersonal questions.&lt;/p&gt;
&lt;p&gt;In the moment though, it&amp;rsquo;ll feel like &amp;ldquo;Wow, that guy is such a jerk.&amp;rdquo;&lt;/p&gt;
&lt;h1 id=&#34;im-going-to-kick-your-ass&#34;&gt;I&amp;rsquo;m going to kick your ass&lt;/h1&gt;
&lt;p&gt;Is all conflict just a misunderstanding? Organizational leaders will often view it that way. We are just one team beer away from harmony.&lt;/p&gt;
&lt;p&gt;At Amazon, when I was a software development manager, two software developer interns from another organization came to my office on a Friday morning. I&amp;rsquo;d never met them before and don&amp;rsquo;t know how they found me. They&amp;rsquo;d been assigned to a non-software organization and were in the final weeks of their internship without having committed any code. They worried this would prevent them from getting a return offer. When I asked why they&amp;rsquo;d waited so long to speak up, they said they were scared of their management and felt isolated.&lt;/p&gt;
&lt;p&gt;I looped in campus recruiting, asking how software interns ended up on a non-software team, how they got through nearly their entire internship without anyone checking in, and what could be done to salvage the situation.&lt;/p&gt;
&lt;p&gt;That night, while getting a beer with a friend, I got a call from an unknown number. I let it go to voicemail. The message was from the VP of the interns&amp;rsquo; organization: &amp;ldquo;I&amp;rsquo;m going to kick your fuckin&amp;rsquo; ass the next time I see you. You need to watch yourself. You messed with the wrong fuckin&amp;rsquo; guy.&amp;rdquo; I&amp;rsquo;d seen this VP in large meetings (e.g., Weekly Business Reviews) but had never worked with him. He must have looked up my number in the phone tool.&lt;/p&gt;
&lt;p&gt;When I told leadership, their lack of surprise was shocking to me. I found out in that meeting that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;He&amp;rsquo;s actually a great guy, just rough around the edges&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;He&amp;rsquo;s very passionate about protecting his team&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Oh and most importantly: &amp;ldquo;He is irreplaceable, nobody can do what he does.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;rsquo;ve still never spoken to the VP. He never followed through on his threat. I really should have put in a peer-review noting his lack of follow-through.&lt;/p&gt;
&lt;p&gt;I hope the interns turned out okay.&lt;/p&gt;
&lt;h1 id=&#34;basic-requirements-1-be-an-asshole&#34;&gt;Basic Requirements: 1) Be an asshole&lt;/h1&gt;
&lt;p&gt;Early on when I worked at Amazon, I was huddled up with a senior technical project manager (TPM) at a coffee shop discussing a project we were working on together. This TPM had been with Amazon from the very early days, and somehow the conversation moved to the culture shifts that had happened in that first decade. He lamented to me that in Amazon&amp;rsquo;s first years, you could be a Director+ without being an asshole. Those days were now gone. To survive in leadership, according to this TPM, sharp elbows were now required. He had war stories galore of interactions with toxic behavior from upper management.&lt;/p&gt;
&lt;p&gt;People love to hear a good war story. It&amp;rsquo;s dramatic. The TPM was so cool because he was in the room with the &amp;ldquo;big boys&amp;rdquo; and I was now in the inner circle to hear what really happens. I loved it, this was the shit they don&amp;rsquo;t teach you in school; this is the real stuff. I never thought to question how accurate his generalizations were. I was too busy learning what it really meant to be a leader; I just needed to up my asshole game.&lt;/p&gt;
&lt;p&gt;The only problem is, I didn&amp;rsquo;t want to hurt people. How could I be the type of leader the company needed me to be, but in a way that felt right to me? I struggled with that question until I left Amazon.&lt;/p&gt;
&lt;h1 id=&#34;that-time-i-crashed-out&#34;&gt;That time I crashed out&lt;/h1&gt;
&lt;p&gt;I later joined Snap to lead their data team. I had spent my time between Amazon and Snap taking care of family and discovering myself. I had grown past all this immaturity. I&amp;rsquo;d just spent two months in Ubud; I was now fully self-actualized (finally!).&lt;/p&gt;
&lt;p&gt;Despite that, it was still tough. It often felt like we were being bullied; my team and I were just trying to do what needed to be done. The managers who reported to me kept telling me they needed more support. I wanted to be strong for them.&lt;/p&gt;
&lt;p&gt;One day, after a long flight, I checked my email and found a long chain where one of my managers was under attack. Evan, Snap&amp;rsquo;s CEO, was on the thread. Internal consultants who didn&amp;rsquo;t understand how our systems worked were making big promises. It was the kind of hubris that&amp;rsquo;s everywhere in tech: all systems look like they were designed by idiots until you actually understand them. Rather than ask us why their approach wouldn&amp;rsquo;t work, they&amp;rsquo;d gone straight to the CEO. Their message boiled down to, &amp;ldquo;These guys are dumb, we can do so much better.&amp;rdquo; My team was spending more time defending than building, and morale was tanking.&lt;/p&gt;
&lt;p&gt;I crashed out. I replied-all with &amp;ldquo;I&amp;rsquo;ve had enough of the peanut gallery&amp;rdquo; and told people to stay in their lane. I was pissed and I wasn&amp;rsquo;t thinking. I assumed the worst intentions. It was a mean thing to do; it was also stupid.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;d written emails like this before but always deleted them. This time, exhausted and past my limit, I hit send. Within seconds, the snaps started rolling in (yes, we used Snapchat to communicate): &amp;ldquo;What are you doing?&amp;rdquo; &amp;ldquo;r u ok?&amp;rdquo; &amp;ldquo;Did you not know Evan was on the thread?&amp;rdquo; Then Evan himself called me out, saying my email didn&amp;rsquo;t reflect his company&amp;rsquo;s values. I was hurt and mad, but he was right. I apologized and meant it.&lt;/p&gt;
&lt;h1 id=&#34;the-myth-of-monotonic-progression&#34;&gt;The myth of monotonic progression&lt;/h1&gt;
&lt;p&gt;I’ve interviewed a lot of technical executives over the years. They tell stories like mine: polished, vulnerable enough to feel honest, but not so vulnerable that it costs them anything. The worst stories are always far enough in the past to show that&amp;rsquo;s not who they are anymore. Carefully walking the line between self-indulgence and authenticity. As if each “learning moment” chipped away their flaws until all that was left was a perfect corporate leader.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s easy to feel at peace with humanity when you are doing yoga in the woods without a care in the world. It&amp;rsquo;s easy to think of people as headcount and percent least effective when you are leading a big organization. It&amp;rsquo;s easy to dismiss reports of abuse as people just complaining when you don&amp;rsquo;t hear it firsthand. Too often, we confuse distance for wisdom when it&amp;rsquo;s really insulation.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve seen executives react with emotion when the fight is nearby. I’ve seen a senior executive waste millions to avoid telling a peer they messed up; because, in their words, that peer was “out to get them.” I’ve seen data falsified to turn red metrics green, because showing weakness felt dangerous. When I called it out, the response was: “It still meets the spirit of the goal.” Do they see themselves as the problem? Who would tell them if they were?&lt;/p&gt;
&lt;h1 id=&#34;do-i-need-to-be-a-jerk&#34;&gt;Do I need to be a jerk?&lt;/h1&gt;
&lt;p&gt;Understanding bad behavior does not mean we are excusing it. We are all human and susceptible to the same errors in one degree or another. The behavior that bothers us in others is an opportunity to look inward at our own actions. Not for performative self-flagellation. Just good old humility, honesty, and reflection. That&amp;rsquo;s the first stage of growth. I&amp;rsquo;ve failed to be better whenever I&amp;rsquo;ve pretended to be perfect.&lt;/p&gt;
&lt;p&gt;What I failed to come to terms with for a long time is that poor emotional control is never a strength. It can seem that way sometimes. We&amp;rsquo;ve all seen the successful asshole. But that&amp;rsquo;s because our systems reward people for having at least one desirable trait, not necessarily all of them. If you&amp;rsquo;re smart or kind, you&amp;rsquo;re in. If you&amp;rsquo;re neither, you&amp;rsquo;re out. Even if smartness and kindness have no underlying correlation, because we only accept people who have at least one of these traits, they will then appear to be inversely correlated; the smart people seem mean, the kind people seem less sharp. It&amp;rsquo;s a statistical mirage we mistake for truth.&lt;/p&gt;
&lt;p&gt;When, as a culture, we decide —by some perverse utilitarian logic— to tolerate cruelty as long as the perpetrator meets a narrow performance expectation, we’re hanging a big sign on the door: “Assholery Welcome!” In doing so, we turn a spurious correlation into a standing expectation.&lt;/p&gt;
&lt;h1 id=&#34;helping-others-learn-from-our-failures&#34;&gt;Helping others learn from our failures&lt;/h1&gt;
&lt;p&gt;These days, I teach. Not because I&amp;rsquo;ve transcended these problems, but because teaching lets me help people grow. That was always my favorite part of being a manager. You don&amp;rsquo;t grow by avoiding failure. You grow by encountering it, reflecting on it, working through the why.&lt;/p&gt;
&lt;p&gt;I sympathize with my students when they say they dislike group projects. I hated group projects as a student too. Trust me, I know people can be difficult to work with.&lt;/p&gt;
&lt;p&gt;I still give them because I want students to run into these human problems in a safer environment, where we can work through them together. Where we can reflect. I hope they become better people as a result. Not by a lot (that would be unrealistic), but by a little. A little less susceptible to tribalism. A little more aware of how to handle abuse when it happens.&lt;/p&gt;
&lt;p&gt;We are all just people. Biased without knowing it. Blind to our own faults. Heroes of our own stories who imagine enemies when they don&amp;rsquo;t exist.  Growing up means learning to question ourselves while still trusting ourselves.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to be a better software manager</title>
      <link>https://www.bonnycode.com/posts/how-to-be-a-better-software-manager/</link>
      <pubDate>Sun, 16 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.bonnycode.com/posts/how-to-be-a-better-software-manager/</guid>
      <description>&lt;p&gt;“My dev team is failing, what software process should we use to be more successful?”&lt;br&gt;
“My dev team keeps missing their deliverables, what task management software should I use so they hit their commitments?”&lt;br&gt;
“I’m not a very fast runner, what shoes should I buy to make me faster?”&lt;br&gt;
“I’m a horrible cook, what knife should I use to make a really tasty meal?”&lt;/p&gt;
&lt;p&gt;I get asked variations on these questions several times a month. You’d think by now I’d be better at answering them. Sadly, I still get this flutter of panic when I hear these questions where I run through my head the best way to unwind the web of assumptions behind these questions. This is where I begin visibly grimacing and possibly sighing. I then start responding with something like “well…. it depends… hmm…” And then I feel guilty for dodging the question when clearly they just want a simple answer and why won’t I just tell them the secret?&lt;/p&gt;
&lt;p&gt;The problem is software process, task management software, shoes, and knives are just tools. Having horrible tools can lead you to fail, but having great tools doesn’t make you succeed. What most people don’t want to hear is that success has more to do with preparation, persistence and a lot of hard work. There is no secret. I have learned a few lessons over the years though, and what follows is what I consider to be important when leading a successful development team.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You don’t manage a bad team to be good, you build a good team and it mostly ends up managing itself. People always tell me that the things I do only work because I have a good team. That is because at least 40% of my time is spent on strictly building the team. Recruiting, mentoring, coaching, training. These activities take time to come to fruition and hard work, so don’t expect immediate results. Your persistence will pay off though. One of the best ways to build your team is by giving them accountability so they can practice exercising good judgement. Too many managers hoard decision making, prioritization and return on investment analysis. For example, make someone on your team accountable for the operational excellence of your team. Work with them to establish metrics for their success, have them come up with and prioritize the activities that will improve operational excellence. Be their mentor or find them a good mentor so they are setup for success in their role, but don’t undermine their authority by overriding them. Do this with as much of your manager responsibilities as you possibly can and constantly give your team members more accountability as they grow. Keep doing it until you worry that you’ll have nothing left to do yourself.&lt;/li&gt;
&lt;li&gt;Craft a long, medium and short term vision by deeply understanding your customers. On each of these time horizons, members of the team should be able to answer the question “What value is my team providing?” and “What value should my team provide?” Ask yourself how your team can be even better. How could your team create even more value? Don’t just do this in a bubble but get out there and learn more about your customers. Read individual customer feedback and piece together patterns that allow your team to deliver even greater value. This isn&amp;rsquo;t a one time activity but a never ending journey of both refining your team&amp;rsquo;s vision and building relationships with your customers.&lt;/li&gt;
&lt;li&gt;It is critical that you understand the role of trust in creating your process. 90% of the process development teams build up is due to a lack of trust, both within the team and between the team and others. Detailed specifications are asked for because the people asking for functionality don’t trust the developers to build the right thing. Commitments are asked for because people don’t trust the developers to work hard and on the right priorities. These process artifacts take time though that take away from the time the team could be spending on creating more value. Ask yourself, is it possible that by building more trust we can run a lighter process that spends more time on creating value? This question should be approached honestly because the answer isn’t always yes but frequently is.&lt;/li&gt;
&lt;li&gt;Manage complexity through iteration, not planning. Most software is not simple and unambiguous. If you are have people using your software directly, it is almost guaranteed to be complex. Humans and their organizations are infallible generators of complexity. The more ambiguous or complex the problem the more aggressive you should be about iteration. Aggressive iteration means being unafraid of throwaway work for the sake of getting a feature out earlier. Aggressive iteration means actually getting the software used though, an unused feature is a feature you aren’t learning from. As a side benefit, iteration is a powerful way to generate trust with customers and management. A productive development team that is regularly demonstrating working, valuable functionality will be more appreciated and have more autonomy.&lt;/li&gt;
&lt;li&gt;Establish a planning horizon for your team that matches your business. Fast iteration isn&amp;rsquo;t an excuse for short term thinking. In my experience too many managers sacrifice long term value chasing after short term results. You need to consider the long term ramifications of your decisions. What is considered long term should match the context of your business. If you are in a fast moving startup that is trying to be the first to market, you should probably optimize for something closer to a 3 month planning horizon than a 3 year horizon. The shorter the planning horizon, the more you can ignore trust issues, technical debt, operational inefficiency, etc. because none of those will matter unless you have a successful product. On the other hand, if you are in a more stable environment with a long planning horizon, a heavy investment in operational efficiency and building trust will pay dividends and be much more cost effective in the long run.&lt;/li&gt;
&lt;li&gt;A team needs a way to understand their long term success. The mistake most people make is they focus first on what is measurable rather than what is important. This leads to ridiculous measures of value like lines of code, story points, estimated accuracy, etc. It can be hard to wrap your head around what success looks like though. Engage your team, your own managers and your customers with the same question. Eventually you&amp;rsquo;ll come to a true measure of your success. The benefit of having that measure goes beyond just knowing what success looks like though. It gives your team autonomy in how they accomplish that success. Without a valid measure of success, your team will be more subject to signing up for arbitrary project deliverables. With a measure of success though, you can commit yourself to that end result, but maintain the freedom along the way in the best way to accomplish it.&lt;/li&gt;
&lt;li&gt;Have fun, be ethical and treat people with respect. Seriously. You have only one life to live and the only measure of a well lived life is to be a good person doing good things. Never sacrifice that for creating more business value or other worldly success. I once worked for a company with massive internal strife. We argued endlessly about minutiae that seemed important at the time, gossiped, disrespected and hated each other. Everyone thought everyone else was an idiot. Then one day in the middle of all this we got called into a conference room to be told that our entire division had been laid off. All of a sudden our petty disagreements all went out the window and I once again saw my former coworkers as people again. I’m not saying to be soft, if someone isn’t delivering on a team then that needs to be dealt with, but that is never an excuse for disrespect.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And now you know what I’ve learned so far about how to lead successful software development teams.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
