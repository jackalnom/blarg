<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Polymorphism on BonnyCode</title>
    <link>http://localhost:1313/tags/polymorphism/</link>
    <description>Recent content in Polymorphism on BonnyCode</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 16 Mar 2008 13:26:43 +0000</lastBuildDate><atom:link href="http://localhost:1313/tags/polymorphism/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Continued Slander against the Noble If</title>
      <link>http://localhost:1313/posts/continued-sland/</link>
      <pubDate>Sun, 16 Mar 2008 13:26:43 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/continued-sland/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve often said that &lt;strong&gt;if&lt;/strong&gt; statements are good indicators of poorly designed code. To illustrate my point, here is some code I recently stole from a major auto insurance firm&lt;a href=&#34;#disclaimer&#34;&gt;1&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;def&lt;/strong&gt; Money calculateAutoInsurance&lt;br&gt;
  &lt;strong&gt;if&lt;/strong&gt; (person &lt;strong&gt;is-a&lt;/strong&gt; Man)&lt;br&gt;
    Man man = (Man)person&lt;br&gt;
    &lt;strong&gt;if&lt;/strong&gt; (man.canGrowBeard)&lt;br&gt;
      &lt;strong&gt;return&lt;/strong&gt; $50&lt;br&gt;
    &lt;strong&gt;else&lt;/strong&gt;&lt;br&gt;
      &lt;strong&gt;return&lt;/strong&gt; $2000&lt;br&gt;
    &lt;strong&gt;end&lt;/strong&gt;&lt;br&gt;
  &lt;strong&gt;else if&lt;/strong&gt; (person &lt;strong&gt;is-a&lt;/strong&gt; Woman)&lt;br&gt;
    &lt;strong&gt;return&lt;/strong&gt; $10&lt;br&gt;
  &lt;strong&gt;else&lt;/strong&gt;&lt;br&gt;
    kaboom!&lt;br&gt;
  &lt;strong&gt;end&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;end&lt;/strong&gt;&lt;br&gt;
 &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;When casting or using any &lt;strong&gt;is-a&lt;/strong&gt; operator such as &lt;strong&gt;instanceof&lt;/strong&gt; in Java or &lt;strong&gt;kind_of?&lt;/strong&gt;/&lt;strong&gt;is_a?&lt;/strong&gt; in Ruby, you should stop to think about whether this is really the best solution. Sometimes it is necessary such as in Java when implementing the equals method or when hacking around a poorly designed third party library. If you are able to modify the classes you are calling though, a simpler solution is to push the conditional logic into the derived classes.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;http://en.wikipedia.org/wiki/Liskov_substitution_principle&#34;&gt;Liskov Substitution Principle&lt;/a&gt; and &lt;a href=&#34;http://en.wikipedia.org/wiki/Substitutability&#34;&gt;substitutability&lt;/a&gt; are helpful in understanding how to design proper polymorphic classes. When a caller is acting upon an interface, one should be able to substitute any type that implements that interface. In this case, the caller is breaking substitutability by casting to a specific derived type and basing logic on what the derived type is.&lt;/p&gt;
&lt;p&gt;Code that follows the substitutability principle is better for several reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Higher cohesion&lt;/strong&gt;&lt;/em&gt;. We can leave the polymorphic dispatch logic up to the language itself so that the calling code doesn&amp;rsquo;t have to worry about the specifics of manipulating derived types.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Better encapsulation&lt;/strong&gt;&lt;/em&gt;. If canGrowBeard was only exposed for auto insurance calculations, it can be rehidden when we push the auto insurance calculation into the derived Persons.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Safer/Easier to extend&lt;/strong&gt;&lt;/em&gt;. For example, it will be easier to add a &lt;a href=&#34;http://en.wikipedia.org/wiki/Third_gender&#34;&gt;third gender&lt;/a&gt; for Person if we know the caller always follows the substitutability principle. I would not advocate removing simplicity to add this extensibility, but given that it is simpler, the extra extensibility is a nice bonus.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;class&lt;/strong&gt; Man &lt;strong&gt;extends&lt;/strong&gt; Person&lt;br&gt;
&amp;hellip;&lt;br&gt;
  &lt;strong&gt;def&lt;/strong&gt; Money autoInsurance&lt;br&gt;
    &lt;strong&gt;if&lt;/strong&gt; (canGrowBeard)&lt;br&gt;
      &lt;strong&gt;return&lt;/strong&gt; $50&lt;br&gt;
    &lt;strong&gt;else&lt;/strong&gt;&lt;br&gt;
      &lt;strong&gt;return&lt;/strong&gt; $2000&lt;br&gt;
    &lt;strong&gt;end&lt;/strong&gt;&lt;br&gt;
  &lt;strong&gt;end&lt;/strong&gt;&lt;br&gt;
&amp;hellip;&lt;br&gt;
&lt;strong&gt;end&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;class&lt;/strong&gt; Woman &lt;strong&gt;extends&lt;/strong&gt; Person&lt;br&gt;
&amp;hellip;&lt;br&gt;
  &lt;strong&gt;def&lt;/strong&gt; Money autoInsurance&lt;br&gt;
    &lt;strong&gt;return&lt;/strong&gt; $10&lt;br&gt;
  &lt;strong&gt;end&lt;/strong&gt;&lt;br&gt;
&amp;hellip;&lt;br&gt;
&lt;strong&gt;end&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;BONUS POINTS&lt;/strong&gt; for anyone that can tell me what is still highly suspicious about the design for the final solution.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Any illegal activity presented here is fictional and any resemblance to illegal activity past, present, or fictional is purely and completely coincidental.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>
