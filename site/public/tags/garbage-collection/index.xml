<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Garbage-Collection on BonnyCode</title>
    <link>http://localhost:1313/tags/garbage-collection/</link>
    <description>Recent content in Garbage-Collection on BonnyCode</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 31 May 2008 16:19:27 +0000</lastBuildDate><atom:link href="http://localhost:1313/tags/garbage-collection/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Winner of Garbage Collection Quiz</title>
      <link>http://localhost:1313/posts/winner-of-garbage-collection-quiz/</link>
      <pubDate>Sat, 31 May 2008 16:19:27 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/winner-of-garbage-collection-quiz/</guid>
      <description>&lt;p&gt;Congratulations to Evan Rosson for his correct answer which I have reposted here for posterity. The only real difference between my answer and Evan&amp;rsquo;s is that I didn&amp;rsquo;t pass in the current thread to the Object Tracker thread and I only used the non-timeout version of ReferenceQueue.remove(). I also didn&amp;rsquo;t use ReferenceQueue.poll in case you wanted to throw that in there somehow. How did my program still work? 5 and a half points for the first person to answer.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;import java.lang.ref.*;&lt;br&gt;
import java.util.*;&lt;/p&gt;
&lt;p&gt;class WarmupQuestion {&lt;br&gt;
private static ArrayList list = track(new ArrayList());&lt;br&gt;
static public void main(String[] args) throws Exception {&lt;br&gt;
track(new WarmupQuestion());&lt;br&gt;
System.gc();&lt;br&gt;
Integer i = track(150);&lt;br&gt;
track(new int[1024 * 1024]);&lt;br&gt;
System.gc();&lt;br&gt;
track(&amp;ldquo;Hello&amp;rdquo;);&lt;br&gt;
i = null;&lt;br&gt;
System.gc();&lt;br&gt;
}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public void finalize() {  
    list.add(this);  
}  

public static &amp;lt;T&amp;gt; T track(T o) {  
    return ObjectTracker.track(o);  
}  

static class TrackedObject {  
    private StackTraceElement[] mStack = new Exception().getStackTrace();  
    private Reference mPhantomRef;  
    private Reference mWeakRef;  
    private Class&amp;lt;?&amp;gt; mCls;  
    private Date mCreated = new Date();  

    public TrackedObject(Object obj, ReferenceQueue allrefs) {  
        mPhantomRef = new PhantomReference(obj, allrefs);  
        mWeakRef = new WeakReference(obj);  
        mCls = obj.getClass();  
    }  

    public Reference getRef() {  
        return mPhantomRef;  
    }  

    private void trace() {  
        for (int i = 3; i &amp;lt; mStack.length; i++)  
            System.out.println(mStack[i].toString());  
    }  

    public void die(Date killed) {  
        System.out.println(String.format(  
                &amp;quot;object of type %s lived for %d ms&amp;quot;, mCls, killed.getTime()  
                        - mCreated.getTime()));  
        trace();  
    }  

    public void die() {  
        String format = (mWeakRef.get() == null)   
            ? &amp;quot;object of type %s has a finalize that raises the dead.&amp;quot;  
            : &amp;quot;object of type %s lived until program exit.&amp;quot;;  
        System.out.println(String.format(format, mCls));  
        trace();  
    }  
}  

static class ObjectTracker extends Thread {  
    private static ReferenceQueue mRefs = new ReferenceQueue();  
    private static Map&amp;lt;Reference, TrackedObject&amp;gt; mTracked =   
        new HashMap&amp;lt;Reference, TrackedObject&amp;gt;();  
    private Thread mMain;  

    public ObjectTracker(Thread thread) {  
        mMain = thread;  
    }  

    public static &amp;lt;T&amp;gt; T track(T o) {  
        TrackedObject tracked = new TrackedObject(o, mRefs);  
        mTracked.put(tracked.getRef(), tracked);  
        return o;  
    }  

    public void run() {  
        try {  
            Reference o = null;  
            while (mMain.isAlive() || null != (o = mRefs.remove(1000))) {  
                if (o != null) {  
                    mTracked.remove(o).die(new Date());  
                }  
            }  
            for (TrackedObject tracked : mTracked.values()) {  
                tracked.die();  
            }  
        } catch (InterruptedException e) {  
            throw new RuntimeException(e);  
        }  
    }  
}  

static {  
    new ObjectTracker(Thread.currentThread()).start();  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;}&lt;/p&gt;&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Garbage Collector Quiz</title>
      <link>http://localhost:1313/posts/garbage-collector-quiz/</link>
      <pubDate>Sat, 24 May 2008 16:49:31 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/garbage-collector-quiz/</guid>
      <description>&lt;p&gt;As promised, here is a little quiz related to the Java Garbage Collector. This one is a little more difficult than my previous quizzes so I&amp;rsquo;ve left a fairly large hint in the code. First person to get the correct answer gets 25 points.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;import java.lang.ref.*;&lt;br&gt;
import java.util.*;&lt;/p&gt;
&lt;p&gt;class WarmupQuestion {&lt;br&gt;
    private static ArrayList list = track(new ArrayList());&lt;br&gt;
    static public void main(String[] args) throws Exception {&lt;br&gt;
        track(new WarmupQuestion());&lt;br&gt;
        System.gc();&lt;br&gt;
        Integer i = track(150);&lt;br&gt;
        track(new int[1024*1024]);&lt;br&gt;
        System.gc();&lt;br&gt;
        track(&amp;ldquo;Hello&amp;rdquo;);&lt;br&gt;
        i = null;&lt;br&gt;
        System.gc();&lt;br&gt;
    }&lt;br&gt;
   &lt;br&gt;
    public void finalize() {&lt;br&gt;
        list.add(this);&lt;br&gt;
    }&lt;br&gt;
   &lt;br&gt;
    public static&lt;!-- raw HTML omitted --&gt; T track(T o) {&lt;br&gt;
        return ObjectTracker.track(o);&lt;br&gt;
    }&lt;/p&gt;
&lt;p&gt;    &amp;hellip;   &lt;br&gt;
}&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;To complete the quiz you must fill in the ellipses with code that has this output when run. Milliseconds and ordering can be different but everything else should be exactly the same.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;object of type [I lived for 12 milliseconds&lt;br&gt;
 WarmupQuestion.main(WarmupQuestion.java:10)&lt;br&gt;
object of type java.lang.Integer lived for 19 milliseconds&lt;br&gt;
 WarmupQuestion.main(WarmupQuestion.java:9)&lt;br&gt;
object of type java.util.ArrayList lived until program exit.&lt;br&gt;
 WarmupQuestion.&lt;!-- raw HTML omitted --&gt;(WarmupQuestion.java:5)&lt;br&gt;
object of type WarmupQuestion has a finalize that raises the dead.&lt;br&gt;
 WarmupQuestion.main(WarmupQuestion.java:7)&lt;br&gt;
object of type java.lang.String lived until program exit.&lt;br&gt;
 WarmupQuestion.main(WarmupQuestion.java:12)&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The program needs to actually track the lifetime of references, just printing out the output does not count. Whenever an object is garbage collected, the ObjecTracker should show how long the object lived and the stack trace for where it was created. If the object was attempted to be garbage collected, but the finalize method brought the object back to life than the ObjectTracker should print the message shown in the example. Other objects that live until the program finally exits should be printed to the screen on program exit with the message shown in the example.&lt;/p&gt;
&lt;p&gt;Good luck!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Related Java quiz posts:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/posts/winner-of-garbage-collection-quiz/&#34;&gt;Winner of Garbage Collection Quiz&lt;/a&gt; - Results and solutions for this garbage collection quiz&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/posts/java-mutability/&#34;&gt;Java Mutability Pop Quiz&lt;/a&gt; - Challenge about Java string mutability&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/posts/integer-boxing/&#34;&gt;Integer Boxing Quiz&lt;/a&gt; - Test your knowledge of Java autoboxing&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/posts/threading-quiz/&#34;&gt;Threading Quiz&lt;/a&gt; - Challenge about threading and volatile keywords&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
