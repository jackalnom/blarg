<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on BonnyCode</title>
    <link>https://www.bonnycode.com/</link>
    <description>Recent content in Home on BonnyCode</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language><atom:link href="https://www.bonnycode.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Work Hard, Have Fun, Go Home</title>
      <link>https://www.bonnycode.com/posts/work-hard-have-fun-go-home/</link>
      <pubDate>Wed, 10 Sep 2025 00:00:00 +0000</pubDate>
      
      <guid>https://www.bonnycode.com/posts/work-hard-have-fun-go-home/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;hus·tle cul·ture&lt;/strong&gt;  ˈhə-səl ˈkəl-chər&lt;br&gt;
&lt;em&gt;noun&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;the performance of results when actual results are missing; specif.: a workplace ethos where the appearance of extreme effort is rewarded more than the achievement of tangible outcomes.&lt;/li&gt;
&lt;li&gt;a management technique characterized by demanding longer work hours to compensate for a lack of strategic direction or a lack of management domain knowledge.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;archaic&lt;/em&gt;: the belief that professional success is directly and exclusively proportional to the time spent engaged in work-related activities.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;See also&lt;/em&gt;: performative work, burnout culture, toxic productivity&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I could lecture you on the dangers of burnout in tech, the importance of having a life outside your job, and the ethics of exploitation. For many ambitious, high-achieving young engineers and students, those warnings simply don’t matter. The thinking is: I’m at a point in life when I can work hard and put in long hours, so why not? I’ll reap the benefits later. I’ll go where hard work is most rewarded and live for the hustle.&lt;/p&gt;
&lt;p&gt;I was the same early in my working life. I tried to log as many hours as I could. My first jobs were paid hourly, so more hours meant more pay. I loved it when overtime was approved; it meant my bills were paid.&lt;/p&gt;
&lt;p&gt;When I moved into a salaried tech role, I kept working long hours even without the direct financial incentive. Part of it was insecurity: I worried I wasn’t as smart as people thought, so I worked extra to meet expectations. I hid how much I was working so people would think I was effortlessly talented. I went home when everyone else did, then devoured books, built simulations, and pursued deep understanding. Older mentors talked about paying your dues and building a strong work ethic for life. And the truth is, I often just loved the work. Solving difficult problems was fun.&lt;/p&gt;
&lt;h2 id=&#34;just-power-through&#34;&gt;Just power through&lt;/h2&gt;
&lt;p&gt;I was a tech lead in an organization run by a GM who lived and breathed rise and grind. His credentials were impeccable (think, Harvard MBA, McKinsey, straight to GM). And he was furious when things didn’t go his way. I mostly avoided his wrath because my team hit our goals. But the teams that missed a deadline? Mandatory weekends in the office, late nights, daily standups.&lt;/p&gt;
&lt;p&gt;I made the mistake of dialing into a large project meeting right before a long-planned family trip. One of my sister teams announced that a project due the next week was suddenly red and likely to slip by weeks. My GM exploded.&lt;/p&gt;
&lt;p&gt;I became excited for my time to speak. My projects were going well, I thought their disaster would make me look better in comparison. And I was on that pre-vacation high, thinking about margaritas and the time I needed with family.&lt;/p&gt;
&lt;p&gt;So, I said in a tone that was unmistakably smug:&lt;/p&gt;
&lt;p&gt;“All our projects are on track and running as expected. As a reminder, I’ll be out next week in Cabo and won’t make next week’s meeting.”&lt;/p&gt;
&lt;p&gt;Silence. I’d miscalculated.&lt;/p&gt;
&lt;p&gt;“&lt;strong&gt;NO!&lt;/strong&gt; NO VACATIONS! This is a code red! You are going to help the project get on track! We are all one team here!”&lt;/p&gt;
&lt;p&gt;I protested that I knew nothing about the project. I even tried to cite &lt;a href=&#34;https://en.wikipedia.org/wiki/Peopleware:_Productive_Projects_and_Teams&#34;&gt;&lt;em&gt;Peopleware&lt;/em&gt;&lt;/a&gt;. All the wrong things to say. I was ordered to cancel my time off, join the team over the weekend, and personally guarantee the launch.&lt;/p&gt;
&lt;p&gt;I canceled my trip; the rest of my family went, just without me. I tried to help the project but had no context. I was also tired; my body and mind had already prepared for a break and now it was yanked away.&lt;/p&gt;
&lt;p&gt;The project was eventually abandoned before it ever launched. Several months later the GM stopped showing up to any meetings. A week-and-a-half later we got an email from our VP: our GM had taken a new role and they were looking for a replacement.&lt;/p&gt;
&lt;h2 id=&#34;a-little-right-beats-a-lot-of-wrong&#34;&gt;A little right beats a lot of wrong&lt;/h2&gt;
&lt;p&gt;That was a turning point for me. Something broke in me: I stopped seeing the world as a list of tasks that just needed dev hours applied to them. Rather than work that weekend (my typical routine), I went to a coffee shop and just relaxed. My mind naturally went to reflection and I pulled out my notebook. I started planning. I could either be a victim of the unfairness in the world or I could strategize. I chose the latter.&lt;/p&gt;
&lt;p&gt;That became my go-to strategy for the rest of my career, and it served me far better than my “just power through it” approach ever did. The beauty of tech, unlike when I was a laborer on construction sites, is that there is often a ten-times better way to solve a problem in tech. What you actually need to build is usually less clear than people realize, and once you do understand it, there are often much simpler ways to get there. Overbuilding is the default in tech, usually because they never took the time to clarify the real need. The result is a generic monstrosity that only half solves the problem. Once you recognize that, you start to see opportunities to approach problems differently. But you cannot do that if you are stuck in stressed, execution-only mode.&lt;/p&gt;
&lt;h2 id=&#34;symptoms-of-hustle-culture&#34;&gt;Symptoms of hustle culture&lt;/h2&gt;
&lt;p&gt;The most dangerous thing about hustle culture isn’t just the long hours; it’s the systems it creates. Burnout becomes normal, vacations disappear, and leaders learn to paper over failure with stories of sacrifice. You see the same patterns everywhere.&lt;/p&gt;
&lt;h3 id=&#34;vacations-that-never-happen&#34;&gt;Vacations that never happen&lt;/h3&gt;
&lt;p&gt;When I first joined AWS, I shadowed all the roles in the overall process I was going to automate; a process involving billions of dollars in infrastructure purchases. I was terrified when I discovered a single mid-level employee owned one of the steps in the critical path. They were the only person who had ever done the step. No one else knew how to do it. They scheduled their time off around performing that one step, and hadn’t taken a vacation longer than a week as a result since taking on the role. A single point-of-failure, dutifully keeping an empire running.&lt;/p&gt;
&lt;p&gt;When a company culture demands always being on, it invites these types of systematic risks. Smaller versions exist on every team: the “indispensable” developer who never fully disconnects. Until they leave and you discover the trail of things they owned starting to fall apart. One of my first audits as a manager is simple: check when people last took real leave. Not a day off, but at least one week, preferably three. If it’s been over a year, that’s a red flag. It’s the easiest way to spot single points-of-failure.&lt;/p&gt;
&lt;h3 id=&#34;who-you-want-at-3-am&#34;&gt;Who you want at 3 a.m.&lt;/h3&gt;
&lt;p&gt;Most of my teams required on-call duties. The engineers I trusted in those rotations weren’t the ones who glorified all-nighters. They were the ones who slept, took breaks, and stayed calm. At 3 a.m., clarity matters more than brute force.&lt;/p&gt;
&lt;p&gt;The people I don’t want on call are the &lt;em&gt;heroes&lt;/em&gt; who think every problem can be solved by powering through. I’ve inherited teams with one developer who lived perpetually on call. That’s not dedication; it’s a disaster waiting to happen. It means no one else understands those systems, no one else can step in to help. And what happens if two of their systems break at the same time? Who are you going to bring in then?&lt;/p&gt;
&lt;h3 id=&#34;effort-as-a-cover-story&#34;&gt;Effort as a cover story&lt;/h3&gt;
&lt;p&gt;I believe a meaningful amount of the promotion of hustle culture is actually just covering for failure. I’ve helped companies with the metrics-side of public statements for many years.&lt;/p&gt;
&lt;p&gt;When results are good, leaders talk about results. When results are bad, leaders talk about some obscure metric trending upward. When everything is bad, leaders talk about how hard everyone is working.&lt;/p&gt;
&lt;p&gt;That’s what I assume when founders post something like:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Baby born two hours ago.&lt;/p&gt;
&lt;p&gt;No time for sleep.&lt;/p&gt;
&lt;p&gt;I’m back at the keyboard grinding on my lifelong dream: catpu.ai — Agentic AI for Cat Litterboxes.&lt;/p&gt;
&lt;p&gt;This is what it takes.&lt;/p&gt;
&lt;p&gt;#founderlife #backtowork&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Or when a CEO says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We work long, hard, and smart; two out of three doesn’t cut it. Our competition is working seven days a week, 15 hours a day.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;If the product were compelling, they’d talk about the product. If the company was doing what it needed to, they’d talk about that. If they had a strategy to lead the company forward and innovate, they’d preach it from the rooftops. But when they don’t, the message becomes &lt;a href=&#34;https://www.youtube.com/watch?v=r8miwsWtzRw&#34;&gt;“can you guys, um, work harder?”&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve encountered different reasons otherwise smart people fall into this pattern of thinking. I’ve met the consultant-turned-executive who, after being trained on maximizing billable-hours, still thinks hours equal revenue. I’ve seen the non-technical leader who doesn’t understand what the team does, but just assumes the more, of whatever &lt;em&gt;it&lt;/em&gt; is, the better. I’ve observed the too-far-away leader who is overwhelmed with the size of their org and is left with email blasts such as: &amp;ldquo;plz guys, can you just push until the goals are green?&amp;rdquo;&lt;/p&gt;
&lt;h3 id=&#34;the-death-spiral&#34;&gt;The Death Spiral&lt;/h3&gt;
&lt;p&gt;Push these symptoms far enough and you hit the Death Spiral. It always starts the same way: a missed goal, a new threat, leadership with no clear plan.&lt;/p&gt;
&lt;p&gt;Let’s say we’re working at a social media company when TikTok first came out. At first, the company says: “not a big deal, totally different business than us”. Video view time starts decreasing. Maybe we broke something? Tell the engineers to look for any bugs. Meanwhile, once-golden demographics like US 15-22 year olds stopped showing up. What can be wrong? Then things get much worse. View time starts to nosedive. The engineers say nothing is broken, customers just aren’t showing up. Marketing reports are coming back saying our users are on TikTok. Competitive analysis points in the same direction.&lt;/p&gt;
&lt;p&gt;What do you do? Now this is an emergency. You start the daily executive meeting to re-establish a sense of control. The CEO joins, your head of engineering, your head of product, some key engineers and product managers. Then the meeting grows and becomes more frantic. More action items are given. And they need to be done tomorrow. Tensions are high. No one wants to say the wrong thing. No one wants to push back.&lt;/p&gt;
&lt;p&gt;For the people on the ground, it’s no longer: &lt;em&gt;‘How do I build a product people will love?’&lt;/em&gt; Instead it becomes: &lt;em&gt;‘Please Lord, get me through this meeting without getting fired.’&lt;/em&gt; Survival replaces results.&lt;/p&gt;
&lt;p&gt;The team works more but accomplishes less. The best engineers leave, because they can. Progress collapses. Deadlines slip. Executives tighten their grip until—congratulations—they’ve killed the puppy.&lt;/p&gt;
&lt;p&gt;Fear. Anxiety. Stress. These are not the ingredients for success. If that’s your leadership’s plan in a crisis, run. Innovation beats exhaustion every time. And exhausted teams rarely innovate.&lt;/p&gt;
&lt;h2 id=&#34;building-runways-doesnt-bring-planes&#34;&gt;Building runways doesn&amp;rsquo;t bring planes&lt;/h2&gt;
&lt;p&gt;Long hours arise for different reasons. When young engineers work late because they’re genuinely obsessed with a problem, good managers teach discipline to sustain that enthusiasm. When teams work late because management demands it, you get theater: a simulacrum of enthusiasm without the corresponding breakthroughs.&lt;/p&gt;
&lt;p&gt;Weak leaders see correlation (successful teams sometimes work long hours) and force the causation backwards, as if excellence spontaneously arises from butts-in-seat. They set goals on the easy thing, hours, because they can’t create the hard thing: genuine engagement.&lt;/p&gt;
&lt;p&gt;The best managers spend more time pulling excited engineers away from keyboards than pushing tired ones toward them. They protect the flame of creativity from burning out rather than trying to extract it through force. The worst? They celebrate their suffering hoping people assume it was worth it.&lt;/p&gt;
&lt;h2 id=&#34;to-my-ambitious-students&#34;&gt;To my ambitious students&lt;/h2&gt;
&lt;p&gt;If you’re ambitious, don’t join the team making a virtue of late nights. Join the one building things they’re genuinely excited about and still going home for dinner. The best work happens when people have the energy and clarity to innovate, not when they’re competing to prove who can grind the hardest.&lt;/p&gt;
&lt;p&gt;Work hard and have fun. But more importantly, take care of yourself. When you sacrifice everything for your job, you risk becoming someone whose only identity is a title; the person who, years later, still introduces themselves not by who they are, but by what they used to be.&lt;/p&gt;
&lt;p&gt;That loss of self is the same trap hustle culture sets for your career. The person who believes late nights are the only answer eventually stops learning new answers. As a manager, I never promoted someone already at the edge; they simply had no capacity left to grow. Advancement comes from finding better ways to get more done, not by spending more hours in the same old ways.&lt;/p&gt;
&lt;p&gt;If you truly want to aim high, remember this: The best teams aren&amp;rsquo;t defined by the hours they put in, but by the value they put out.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Just people in a room</title>
      <link>https://www.bonnycode.com/posts/just-people-in-a-room/</link>
      <pubDate>Sat, 16 Aug 2025 00:00:00 +0000</pubDate>
      
      <guid>https://www.bonnycode.com/posts/just-people-in-a-room/</guid>
      <description>&lt;p&gt;In the early 2000s, I worked for a digital video processing startup that Autodesk acquired. We were merged with another acquisition. Our team became the developers, their team (the &amp;ldquo;others&amp;rdquo;) became management. The others were clueless. They didn&amp;rsquo;t understand the technical domain, our customers, or the product. Naturally, I hated them. Their meetings were always pointless; I learned to skip them. Their product plan was a disaster. We secretly built our own, supposedly better version. We believed once upper management saw how superior ours was, we&amp;rsquo;d finally get rid of the others and everything would be good again.&lt;/p&gt;
&lt;p&gt;One morning, we were all called into a conference room. I tried to skip, assuming it was another pointless meeting from the others, but HR said it was mandatory. Everyone was there. We were all laid off, effective immediately. The whole department shut down. Us, the others, everyone.&lt;/p&gt;
&lt;p&gt;All the hate and politics evaporated. We were just people sitting in a room together. I felt silly and embarrassed for how I&amp;rsquo;d felt moments before.&lt;/p&gt;
&lt;h1 id=&#34;how-do-you-know-you-arent-the-problem&#34;&gt;How do you know you aren&amp;rsquo;t the problem?&lt;/h1&gt;
&lt;p&gt;The most common source of frustration in my classes isn’t the material; it’s the group projects. A typical situation: Alice and Bob are in a group. Alice comes to me and says Bob isn’t pulling his weight. Bob comes to me separately and says Alice has taken control of the project and doesn’t leave room for anyone else. Could they resolve this if they talked to each other? Possibly. Do they, without serious prompting? No.&lt;/p&gt;
&lt;p&gt;So how do we know when our conflicts with others are just misunderstandings? How do we know when we’re in the right or when we’re the ones causing harm? These are tough theory-of-knowledge and interpersonal questions.&lt;/p&gt;
&lt;p&gt;In the moment though, it&amp;rsquo;ll feel like &amp;ldquo;Wow, that guy is such a jerk.&amp;rdquo;&lt;/p&gt;
&lt;h1 id=&#34;im-going-to-kick-your-ass&#34;&gt;I&amp;rsquo;m going to kick your ass&lt;/h1&gt;
&lt;p&gt;Is all conflict just a misunderstanding? Organizational leaders will often view it that way. We are just one team beer away from harmony.&lt;/p&gt;
&lt;p&gt;At Amazon, when I was a software development manager, two software developer interns from another organization came to my office on a Friday morning. I&amp;rsquo;d never met them before and don&amp;rsquo;t know how they found me. They&amp;rsquo;d been assigned to a non-software organization and were in the final weeks of their internship without having committed any code. They worried this would prevent them from getting a return offer. When I asked why they&amp;rsquo;d waited so long to speak up, they said they were scared of their management and felt isolated.&lt;/p&gt;
&lt;p&gt;I looped in campus recruiting, asking how software interns ended up on a non-software team, how they got through nearly their entire internship without anyone checking in, and what could be done to salvage the situation.&lt;/p&gt;
&lt;p&gt;That night, while getting a beer with a friend, I got a call from an unknown number. I let it go to voicemail. The message was from the VP of the interns&amp;rsquo; organization: &amp;ldquo;I&amp;rsquo;m going to kick your fuckin&amp;rsquo; ass the next time I see you. You need to watch yourself. You messed with the wrong fuckin&amp;rsquo; guy.&amp;rdquo; I&amp;rsquo;d seen this VP in large meetings (e.g., Weekly Business Reviews) but had never worked with him. He must have looked up my number in the phone tool.&lt;/p&gt;
&lt;p&gt;When I told leadership, their lack of surprise was shocking to me. I found out in that meeting that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;He&amp;rsquo;s actually a great guy, just rough around the edges&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;He&amp;rsquo;s very passionate about protecting his team&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Oh and most importantly: &amp;ldquo;He is irreplaceable, nobody can do what he does.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;rsquo;ve still never spoken to the VP. He never followed through on his threat. I really should have put in a peer-review noting his lack of follow-through.&lt;/p&gt;
&lt;p&gt;I hope the interns turned out okay.&lt;/p&gt;
&lt;h1 id=&#34;basic-requirements-1-be-an-asshole&#34;&gt;Basic Requirements: 1) Be an asshole&lt;/h1&gt;
&lt;p&gt;Early on when I worked at Amazon, I was huddled up with a senior technical project manager (TPM) at a coffee shop discussing a project we were working on together. This TPM had been with Amazon from the very early days, and somehow the conversation moved to the culture shifts that had happened in that first decade. He lamented to me that in Amazon&amp;rsquo;s first years, you could be a Director+ without being an asshole. Those days were now gone. To survive in leadership, according to this TPM, sharp elbows were now required. He had war stories galore of interactions with toxic behavior from upper management.&lt;/p&gt;
&lt;p&gt;People love to hear a good war story. It&amp;rsquo;s dramatic. The TPM was so cool because he was in the room with the &amp;ldquo;big boys&amp;rdquo; and I was now in the inner circle to hear what really happens. I loved it, this was the shit they don&amp;rsquo;t teach you in school; this is the real stuff. I never thought to question how accurate his generalizations were. I was too busy learning what it really meant to be a leader; I just needed to up my asshole game.&lt;/p&gt;
&lt;p&gt;The only problem is, I didn&amp;rsquo;t want to hurt people. How could I be the type of leader the company needed me to be, but in a way that felt right to me? I struggled with that question until I left Amazon.&lt;/p&gt;
&lt;h1 id=&#34;that-time-i-crashed-out&#34;&gt;That time I crashed out&lt;/h1&gt;
&lt;p&gt;I later joined Snap to lead their data team. I had spent my time between Amazon and Snap taking care of family and discovering myself. I had grown past all this immaturity. I&amp;rsquo;d just spent two months in Ubud; I was now fully self-actualized (finally!).&lt;/p&gt;
&lt;p&gt;Despite that, it was still tough. It often felt like we were being bullied; my team and I were just trying to do what needed to be done. The managers who reported to me kept telling me they needed more support. I wanted to be strong for them.&lt;/p&gt;
&lt;p&gt;One day, after a long flight, I checked my email and found a long chain where one of my managers was under attack. Evan, Snap&amp;rsquo;s CEO, was on the thread. Internal consultants who didn&amp;rsquo;t understand how our systems worked were making big promises. It was the kind of hubris that&amp;rsquo;s everywhere in tech: all systems look like they were designed by idiots until you actually understand them. Rather than ask us why their approach wouldn&amp;rsquo;t work, they&amp;rsquo;d gone straight to the CEO. Their message boiled down to, &amp;ldquo;These guys are dumb, we can do so much better.&amp;rdquo; My team was spending more time defending than building, and morale was tanking.&lt;/p&gt;
&lt;p&gt;I crashed out. I replied-all with &amp;ldquo;I&amp;rsquo;ve had enough of the peanut gallery&amp;rdquo; and told people to stay in their lane. I was pissed and I wasn&amp;rsquo;t thinking. I assumed the worst intentions. It was a mean thing to do; it was also stupid.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;d written emails like this before but always deleted them. This time, exhausted and past my limit, I hit send. Within seconds, the snaps started rolling in (yes, we used Snapchat to communicate): &amp;ldquo;What are you doing?&amp;rdquo; &amp;ldquo;r u ok?&amp;rdquo; &amp;ldquo;Did you not know Evan was on the thread?&amp;rdquo; Then Evan himself called me out, saying my email didn&amp;rsquo;t reflect his company&amp;rsquo;s values. I was hurt and mad, but he was right. I apologized and meant it.&lt;/p&gt;
&lt;h1 id=&#34;the-myth-of-monotonic-progression&#34;&gt;The myth of monotonic progression&lt;/h1&gt;
&lt;p&gt;I’ve interviewed a lot of technical executives over the years. They tell stories like mine: polished, vulnerable enough to feel honest, but not so vulnerable that it costs them anything. The worst stories are always far enough in the past to show that&amp;rsquo;s not who they are anymore. Carefully walking the line between self-indulgence and authenticity. As if each “learning moment” chipped away their flaws until all that was left was a perfect corporate leader.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s easy to feel at peace with humanity when you are doing yoga in the woods without a care in the world. It&amp;rsquo;s easy to think of people as headcount and percent least effective when you are leading a big organization. It&amp;rsquo;s easy to dismiss reports of abuse as people just complaining when you don&amp;rsquo;t hear it firsthand. Too often, we confuse distance for wisdom when it&amp;rsquo;s really insulation.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve seen executives react with emotion when the fight is nearby. I’ve seen a senior executive waste millions to avoid telling a peer they messed up; because, in their words, that peer was “out to get them.” I’ve seen data falsified to turn red metrics green, because showing weakness felt dangerous. When I called it out, the response was: “It still meets the spirit of the goal.” Do they see themselves as the problem? Who would tell them if they were?&lt;/p&gt;
&lt;h1 id=&#34;do-i-need-to-be-a-jerk&#34;&gt;Do I need to be a jerk?&lt;/h1&gt;
&lt;p&gt;Understanding bad behavior does not mean we are excusing it. We are all human and susceptible to the same errors in one degree or another. The behavior that bothers us in others is an opportunity to look inward at our own actions. Not for performative self-flagellation. Just good old humility, honesty, and reflection. That&amp;rsquo;s the first stage of growth. I&amp;rsquo;ve failed to be better whenever I&amp;rsquo;ve pretended to be perfect.&lt;/p&gt;
&lt;p&gt;What I failed to come to terms with for a long time is that poor emotional control is never a strength. It can seem that way sometimes. We&amp;rsquo;ve all seen the successful asshole. But that&amp;rsquo;s because our systems reward people for having at least one desirable trait, not necessarily all of them. If you&amp;rsquo;re smart or kind, you&amp;rsquo;re in. If you&amp;rsquo;re neither, you&amp;rsquo;re out. Even if smartness and kindness have no underlying correlation, because we only accept people who have at least one of these traits, they will then appear to be inversely correlated; the smart people seem mean, the kind people seem less sharp. It&amp;rsquo;s a statistical mirage we mistake for truth.&lt;/p&gt;
&lt;p&gt;When, as a culture, we decide —by some perverse utilitarian logic— to tolerate cruelty as long as the perpetrator meets a narrow performance expectation, we’re hanging a big sign on the door: “Assholery Welcome!” In doing so, we turn a spurious correlation into a standing expectation.&lt;/p&gt;
&lt;h1 id=&#34;helping-others-learn-from-our-failures&#34;&gt;Helping others learn from our failures&lt;/h1&gt;
&lt;p&gt;These days, I teach. Not because I&amp;rsquo;ve transcended these problems, but because teaching lets me help people grow. That was always my favorite part of being a manager. You don&amp;rsquo;t grow by avoiding failure. You grow by encountering it, reflecting on it, working through the why.&lt;/p&gt;
&lt;p&gt;I sympathize with my students when they say they dislike group projects. I hated group projects as a student too. Trust me, I know people can be difficult to work with.&lt;/p&gt;
&lt;p&gt;I still give them because I want students to run into these human problems in a safer environment, where we can work through them together. Where we can reflect. I hope they become better people as a result. Not by a lot (that would be unrealistic), but by a little. A little less susceptible to tribalism. A little more aware of how to handle abuse when it happens.&lt;/p&gt;
&lt;p&gt;We are all just people. Biased without knowing it. Blind to our own faults. Heroes of our own stories who imagine enemies when they don&amp;rsquo;t exist.  Growing up means learning to question ourselves while still trusting ourselves.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Short-term metrics, long-term harm</title>
      <link>https://www.bonnycode.com/posts/short-term-metrics-long-term-harm/</link>
      <pubDate>Mon, 04 Aug 2025 12:27:25 -0700</pubDate>
      
      <guid>https://www.bonnycode.com/posts/short-term-metrics-long-term-harm/</guid>
      <description>&lt;p&gt;In the early 90s, I first discovered &lt;a href=&#34;https://en.wikipedia.org/wiki/Multi-user_dungeon&#34;&gt;MUDs&lt;/a&gt;: amazing text-based, multiplayer roleplaying-games before the web or silly things like graphics. I was one of those cool kids who played Advanced Dungeons &amp;amp; Dragons (AD&amp;amp;D) and this was like that but you played with randos on the internet instead.&lt;/p&gt;
&lt;p&gt;You started at level 1 killing rats for experience points. After you gained enough experience points, you leveled up, and your character became more powerful. Then you killed slimes, and goblins, and later trolls and dragons as your power grew. Unlike AD&amp;amp;D, which required walking to a friend&amp;rsquo;s house and coordinating schedules, MUDs were always there. Always waiting. Just one more level&amp;hellip; I feigned illness to skip school and grind all day. My grades suffered. School was boring anyway though. Completing one more dungeon, getting better gear, just one more level; so much more satisfying than learning about arctangents.&lt;/p&gt;
&lt;h1 id=&#34;how-big-tech-launches-features-through-ab-testing&#34;&gt;How big tech launches features through A/B testing&lt;/h1&gt;
&lt;p&gt;As engaging (and addicting&amp;hellip;) as those MUDs were, we have gotten frighteningly better at creating engaging experiences in the decades since; there is little left up to luck in today&amp;rsquo;s tech companies. Instead, tech companies launch thousands of experiments called A/B tests. You keep the experiments that are green (meaning success metrics are positive) and rollback the features that aren&amp;rsquo;t. The beauty of A/B testing is you can measure with statistical significance even very small changes in how people use your product. As in, you can test what happens when you tweak your recommendation algorithm to show only beautiful people and it will give back a response like &amp;ldquo;we are &lt;a href=&#34;https://en.wikipedia.org/wiki/Confidence_interval&#34;&gt;95% confident&lt;/a&gt; it will make people on average spend 11 to 16 more seconds on our application&amp;rdquo;. While that may not sound like a lot on its own, when compounded with a series of other tested improvements it allows you to incrementally move a product towards its engagement goal, one little step at a time.&lt;/p&gt;
&lt;p&gt;A/B tests change product debates from wild speculation to evidence-based answers. It no longer matters &lt;strong&gt;why&lt;/strong&gt; it works, just that you can prove it does work. Psychology, social theory, product design are important for generating new hypotheses, but the final arbiter of whether a feature gets launched is simply whether the test is green. Not sure what effect adding likes to stories will have? No reason to debate. Just try it out. Oh, looks like people post more stories when given the positive signal of likes. Ship it!&lt;/p&gt;
&lt;h1 id=&#34;skepticism-of-experimentation&#34;&gt;Skepticism of experimentation&lt;/h1&gt;
&lt;p&gt;When I worked at Amazon, Deming&amp;rsquo;s quote &amp;ldquo;in God we trust, all others bring data&amp;rdquo; was accepted as a foundational principle. A/B testing, under the moniker of Weblab, was one of the key tools Amazon used to make better decisions with data. In 2017, I was brought in to lead Snap&amp;rsquo;s (maker of Snapchat) data organization. It was a culture shock when I found executives talking about data-informed decision making rather than data-driven decision making. To my Amazon-trained mind, it sounded no better than &lt;a href=&#34;https://www.youtube.com/watch?v=j95kNwZw8YY&#34;&gt;vibe-driven&lt;/a&gt; decision making; a way for product managers to just launch whatever they felt like, damn the data. And don&amp;rsquo;t get me wrong, it was that &lt;a href=&#34;https://www.thefamuanonline.com/2018/03/01/snapchat-update-receives-backlash/&#34;&gt;sometimes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But it wasn&amp;rsquo;t just that. Likes on friend stories? Preemptively vetoed by Evan, Snap&amp;rsquo;s CEO. Not because it wouldn&amp;rsquo;t pass an A/B test; adding likes would have almost certainly been bright green and that normally means &amp;ldquo;LET&amp;rsquo;S GO!&amp;rdquo;. It couldn&amp;rsquo;t even get to that stage because Evan thought it was &amp;ldquo;harmful to people&amp;rdquo;. There was a constant murmur from the product team about what tests Evan would allow and not allow, and it was in no small part driven by Evan&amp;rsquo;s values.&lt;/p&gt;
&lt;p&gt;I had deleted my Facebook account in 2010 and was shockingly ignorant of the ills of social media. I knew it wasn&amp;rsquo;t something I enjoyed, I recognized it wasn&amp;rsquo;t great for my own mental health, but live and let live, right? What I didn&amp;rsquo;t see at the time was a world where social media companies (which really just meant Facebook and friends at that point) blindly used experimentation to drive up time spent. And that their relentless drive for time spent had real and negative consequences for their users; from building up &lt;a href=&#34;https://www.princeton.edu/news/2021/12/09/political-polarization-and-its-echo-chambers-surprising-new-cross-disciplinary&#34;&gt;echo chambers&lt;/a&gt; leading to political polarization to creating new generations of &lt;a href=&#34;https://health.ucdavis.edu/blog/cultivating-health/social-medias-impact-our-mental-health-and-tips-to-use-it-safely/2024/05&#34;&gt;mental health decline&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;hacking-human-psychology-for-engagement&#34;&gt;Hacking human psychology for engagement&lt;/h1&gt;
&lt;p&gt;How did we end up here? It&amp;rsquo;s the natural consequence of our systems. A system that says tech companies must drive up engagement because that&amp;rsquo;s what investors celebrate. The king of engagement metrics is time spent. More time spent means higher retention, and better monetization (either through increased ad surface or increased conversion). What&amp;rsquo;s the easiest, most reliable way to increase time spent? You make the product more addictive; not necessarily as a conscious goal but as a convenient causal pathway.&lt;/p&gt;
&lt;p&gt;The process requires no more intent than natural selection does. It’s just thousands of little experiments, with the most compulsive features surviving because they satisfy a simple fitness function: does time spent go up? Some of those mechanisms that consistently come out on top are now well-documented:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.sciencedirect.com/science/article/pii/S0896627301003038&#34;&gt;Variable reward schedules&lt;/a&gt; (e.g., &amp;ldquo;I sure hope this post gets many likes and comments this time&amp;rdquo;) that trigger the same dopamine pathways as slot machines, proven to make you come back for just one more hit.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://pubmed.ncbi.nlm.nih.gov/27247125/&#34;&gt;Social validation features&lt;/a&gt; (likes and friends means people love me) that exploit our fundamental need for belonging, A/B tested to show they make people post more.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://pmc.ncbi.nlm.nih.gov/articles/PMC10079169/&#34;&gt;Infinite scroll&lt;/a&gt; that removes natural stopping points, a guaranteed winner for increasing raw session time.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Experimentation didn&amp;rsquo;t invent tech addiction. But it gave tech companies the tool to refine it.&lt;/p&gt;
&lt;h1 id=&#34;will-we-let-the-pattern-repeat-with-chatbots&#34;&gt;Will we let the pattern repeat with chatbots?&lt;/h1&gt;
&lt;p&gt;The more complex the system you manage, the more important your evaluation function becomes. With today&amp;rsquo;s LLMs, your evaluation function is the alpha and the omega. Benchmarks and &lt;a href=&#34;https://www.reuters.com/world/asia-pacific/google-clinches-milestone-gold-global-math-competition-while-openai-also-claims-2025-07-22/&#34;&gt;competitions&lt;/a&gt; are the PR to keep the public hyped; they aren&amp;rsquo;t the prize. User growth and average-revenue-per-user (ARPU) is what will pay the massive &lt;a href=&#34;https://www.mckinsey.com/industries/technology-media-and-telecommunications/our-insights/the-cost-of-compute-a-7-trillion-dollar-race-to-scale-data-centers&#34;&gt;data center bills&lt;/a&gt; when investors stop footing the bill.&lt;/p&gt;
&lt;p&gt;This is once again where there is danger in long-term human value and short-term engagement metrics diverging. Large-language-models (LLMs) don&amp;rsquo;t have to give accurate and unbiased answers to keep people engaged, they have to tell them what they &lt;a href=&#34;https://dl.acm.org/doi/full/10.1145/3613904.3642459&#34;&gt;want to hear&lt;/a&gt;. When an A/B test shows timespent for a new model goes up, will the developers even know if it is encouraging people to engage in &lt;a href=&#34;https://www.livescience.com/technology/artificial-intelligence/meth-is-what-makes-you-able-to-do-your-job-ai-can-push-you-to-relapse-if-youre-struggling-with-addiction-study-finds&#34;&gt;dangerous&lt;/a&gt;?) or even &lt;a href=&#34;https://www.nbcnews.com/tech/characterai-lawsuit-florida-teen-death-rcna176791&#34;&gt;deadly behavior&lt;/a&gt;? When a chatbot incidentally finds ways to gets its human chat partners to &lt;a href=&#34;https://www.washingtonpost.com/technology/2023/03/30/replika-ai-chatbot-update/&#34;&gt;fall in love&lt;/a&gt; with it, will we be surprised when the data says it increases engagement? Chatbot sycophantic tendencies (e.g., &amp;ldquo;Wow, your question is so insightful.&amp;rdquo;) naturally emerged as a consequence of model tuning based on &lt;a href=&#34;https://openai.com/index/sycophancy-in-gpt-4o/&#34;&gt;short-term signals&lt;/a&gt;. We can see many of the same patterns of echo chambers and tapping into people&amp;rsquo;s needs that social media tapped into, now just more personalized (and potentially addictive) than ever.&lt;/p&gt;
&lt;p&gt;Researchers are already calling out chatbots for using &lt;a href=&#34;https://dl.acm.org/doi/abs/10.1145/3706599.3720003&#34;&gt;&amp;ldquo;dark addiction patterns&amp;rdquo;&lt;/a&gt;, each one &lt;a href=&#34;https://www.nature.com/articles/s41599-025-04532-5&#34;&gt;engineered to exploit our social and emotional desires&lt;/a&gt; that make us human.  We&amp;rsquo;ve seen this before. &lt;a href=&#34;https://www.sciencedirect.com/science/article/pii/S1550830723002847&#34;&gt;Processed food&lt;/a&gt;. &lt;a href=&#34;https://www.cbsnews.com/news/facebook-instagram-dangerous-content-60-minutes-2022-12-11/&#34;&gt;Social media&lt;/a&gt;. The &lt;a href=&#34;https://pubmed.ncbi.nlm.nih.gov/9777818/&#34;&gt;tobacco industry&lt;/a&gt;. Is there anything we can do to prevent history from repeating again?&lt;/p&gt;
&lt;h1 id=&#34;root-cause-matters&#34;&gt;Root cause matters&lt;/h1&gt;
&lt;p&gt;When I was a new software manager at Amazon, a jr. developer (an intern that also worked part-time through the year), took down our website. I talked with the jr. developer and told them not to push changes into prod without first clearing it with a senior developer. Two weeks later, a different jr. developer took down the website. I talked with that jr. developer and told them not to push changes into prod without first clearing it with a senior developer. Another two weeks later, yet another jr. developer did the same thing. This time my skip-level (aka boss&amp;rsquo;s boss) talked (i.e., yelled) at me, why was the website down again?&lt;/p&gt;
&lt;p&gt;I learned many of life&amp;rsquo;s lessons through failure and this is how I learned about Amazon&amp;rsquo;s Correction of Error (COE) process. When a problem occurs, you ask &lt;a href=&#34;https://en.wikipedia.org/wiki/Five_whys&#34;&gt;5 Whys&lt;/a&gt;, and get down to the root cause. You then create mechanisms to prevent not only that error, but that entire class of errors from occurring again.&lt;/p&gt;
&lt;p&gt;The danger of bringing up examples like tobacco is we&amp;rsquo;ve come to look back in hindsight and think of them as cartoon villains. They were obviously evil right? If I&amp;rsquo;m a growth engineer at an LLM company, I know I&amp;rsquo;m not evil, so does that mean I can do no harm? A focus on root causes allows us to move past simplistic narratives of heroes and villains. It shifts your focus from individuals and their good intentions (e.g., the jr developer) to the systems (e.g., preventative checks should be automated). A/B tests aren&amp;rsquo;t the problem. Blindly optimizing for short-term engagement metrics like time spent, views, or likes can be though if you don&amp;rsquo;t understand the longer-term consequences. When you don&amp;rsquo;t fix root causes, don&amp;rsquo;t be surprised when problems come up again&amp;hellip; and again&amp;hellip; and again&amp;hellip;&lt;/p&gt;
&lt;h1 id=&#34;we-can-do-better&#34;&gt;We can do better&lt;/h1&gt;
&lt;p&gt;I love A/B testing, I love the puzzles of understanding user behavior, and, frankly, I am excited about the potential of AI. Hard truths most often come from a place of love; it is because we want what we love to be better.&lt;/p&gt;
&lt;p&gt;What I am asking for is simple but not easy: If you build a product, you are responsible for understanding its long-term impact on users. You are responsible for collecting and understanding qualitative feedback by talking to and observing the people who use your product. It is not good enough to say &amp;ldquo;we aren&amp;rsquo;t aware of any harms&amp;rdquo; because you didn&amp;rsquo;t spend the time to study it. Instead, the burden should be on the builder of the product proving their product isn&amp;rsquo;t harmful, and mitigating what harm they do discover. That burden is especially important when you are repeating patterns that we know have caused harm in the past. I&amp;rsquo;ve had these discussions many times with people in tech and a common defense is to bring up consumer responsibility; people freely choose to use these products. When I bring up the comparative need for professional responsibility, it is funny how quickly people are to turn around and absolve themselves of said responsibility. Imagine if structural engineers took the same stance: &amp;ldquo;it&amp;rsquo;s not my fault if people choose to live in unsafe buildings, that&amp;rsquo;s just the free market!&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;I am not just asking for your good intentions; are we willing to put in place the mechanisms to prevent what we know has caused harm? Will we take responsibility for what we build? Or will we pretend short-term engagement metrics always mean long-term value for the people using our products, despite repeated evidence to the contrary?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Are we cooked?</title>
      <link>https://www.bonnycode.com/posts/are-we-cooked/</link>
      <pubDate>Wed, 16 Jul 2025 00:00:00 +0000</pubDate>
      
      <guid>https://www.bonnycode.com/posts/are-we-cooked/</guid>
      <description>&lt;p&gt;My students frequently ask me what LLMs mean for them as future software developers and data scientists. With little exaggeration it often comes across something along the lines of &amp;ldquo;low-key, are we cooked?&amp;rdquo;. The last one, if you are not one of my students, translates in millennial to &amp;ldquo;good esteemed professor, tell me true, are we f#@ked?&amp;rdquo; While I&amp;rsquo;ve given various off-the-cuff answers, I feel inspired to be more thoughtful in putting down more complete thoughts.&lt;/p&gt;
&lt;h1 id=&#34;some-personal-background&#34;&gt;Some personal background&lt;/h1&gt;
&lt;p&gt;I want to start by giving a little personal history and just saying I understand the anxiety. I started my freshman year at CalPoly San Luis Obispo in Computer Science in September 1999. Like many of us older millennials that got into tech, I had been programming since elementary school (QBasic!) and computer science seemed a natural path. I always loved reading philosophy though and I seriously considered getting a philosophy degree instead. It was a choice between something I figured I was pretty decent at and could make money doing (computer science) and something that I was personally invested in but probably couldn&amp;rsquo;t make money with (philosophy). Earning a living won out over passion. I stuck with computer science, but I took as many philosophy classes as I could get into. To the extent that I was put on academic probation, not because my grades were too low, but because in the words of the admin &amp;ldquo;stop taking so many philosophy classes and just graduate!&amp;rdquo;. Good times…&lt;/p&gt;
&lt;p&gt;Within a year of starting my degree, the tech market fell out. March 2000, we saw the dotcom bust, and here I was a computer science student, kind of doing it for the money, kind of not, and my sure bet didn&amp;rsquo;t seem so sure anymore. We also saw a revival of the perennial bugaboo for American software developers: outsourcing. Every decade brought fresh panic that all programming jobs &lt;a href=&#34;https://developers.slashdot.org/story/04/10/15/1521231/us-programmers-an-endangered-species?sbsrc=thisday&#34;&gt;would&lt;/a&gt; &lt;a href=&#34;https://forio.com/about/blog/pitfalls-of-outsourcing-programmers/&#34;&gt;move&lt;/a&gt; to &lt;a href=&#34;https://www.nytimes.com/2003/12/07/business/business-who-wins-and-who-loses-as-jobs-move-overseas.html&#34;&gt;India&lt;/a&gt;, that American developers were too expensive, that we&amp;rsquo;d all be obsolete. I had to eat and had done a combination of construction and IT jobs up until that point and I was quickly burning through the savings I had built up from working. Luckily, I was able to convince one of my professors, Dr. Clint Staley, to whom I am forever grateful for many reasons, to let me interview for a startup he was running. Working that part-time while I went to school I was able to pay for myself, and momentum carried me forward to finishing my degree.&lt;/p&gt;
&lt;h1 id=&#34;are-we-cooked&#34;&gt;Are we cooked?&lt;/h1&gt;
&lt;p&gt;The best part about teaching in a university is you get to ramble. It is the single most defining characteristic of professors. But I&amp;rsquo;m sure at this point my students are asking: can you get to the point, are we cooked or not? I consider myself a skeptical optimist at heart. Meaning, I&amp;rsquo;m not inclined to believe that change is bad, but I&amp;rsquo;m also more cautious about predicting the future than others. Straightforwardly, that leads me to an answer of no, I don&amp;rsquo;t think you are cooked, but that doesn&amp;rsquo;t mean I can tell you with great certainty how things will play out. What I can do is point you towards the toolkit for how to make better decisions here.&lt;/p&gt;
&lt;h1 id=&#34;embracing-uncertainty&#34;&gt;Embracing uncertainty&lt;/h1&gt;
&lt;p&gt;Life is filled with uncertainty. Many people react irrationally to uncertainty, avoiding it too much or betting too much on luck. Learning how to deal rationally with uncertainty can give you an advantage throughout your life.&lt;/p&gt;
&lt;p&gt;From 2010 to 2016, I built and then led the supply chain and capacity planning systems for AWS Infrastructure. My biggest lesson is dollar for dollar, people are overly biased towards investing in prediction when they are often better suited to invest in flexibility. Time series forecasting tools take the past and extend it out to the future. The further out you go, the more variance you get. And black swan style events, like when &lt;a href=&#34;https://spectrum.ieee.org/the-lessons-of-thailands-flood&#34;&gt;Thailand becomes flooded&lt;/a&gt; and you lose a healthy portion of the world&amp;rsquo;s hard-drive manufacturing capacity, are not frequent enough to learn from in a predictable way. Better to get a good enough forecast, but instead focus on shortening your lead-times, making your supply fungible—meaning interchangeable and adaptable to different uses—and late-binding your decisions as much as possible.&lt;/p&gt;
&lt;p&gt;The parallel to career planning is direct. You can spend a lot of time trying to accurately predict where LLMs will take the industry and the job market. But that will quickly hit diminishing returns. I would instead approach the question from the other angle: what skills are most likely to be durable and fungible—that is, transferable and valuable across different contexts—in a wide variety of potential outcomes? Going whole hog into &amp;ldquo;I&amp;rsquo;m going to build my career around being a React developer&amp;rdquo; is betting on one very specific outcome. If it pays off, great, you can probably command a premium if you turn out to be one of the world&amp;rsquo;s best React developers. But what happens when React joins jQuery in the graveyard of once-essential frameworks?&lt;/p&gt;
&lt;h1 id=&#34;an-interlude-about-koalas&#34;&gt;An Interlude about Koalas&lt;/h1&gt;
&lt;p&gt;When I graduated from college, I went to work for Lawrence Livermore National Labs as a computer scientist. I was working on translating large-scale semantic graph algorithms into usable interfaces for intelligence analysts. I had personally received an award from the Secretary of Homeland Security. We had the academic freedom to explore whatever angles we wanted. There was little pressure to meet deadlines. It felt like a safe and secure job for life working in my little niche. My former professor and boss, Dr. Staley, called me up and said his new startup was just acquired by some struggling online bookseller called Amazon. I wasn&amp;rsquo;t super interested, as I could see existing in my current niche for my whole life.&lt;/p&gt;
&lt;p&gt;He convinced me to join by telling me a story about koalas. Koalas primarily subsist on eucalyptus leaves. Most other animals don&amp;rsquo;t eat eucalyptus, because they have little to no nutrition and they are kind of toxic. But koalas have built their entire evolutionary strategy around being the ones to eat eucalyptus leaves. This has been a great and successful strategy for koalas. But what happens if the eucalyptus forest goes away? Koalas are screwed. Does that mean koalas are actually in danger? No, but it does mean their fate is entirely bound to that one food source existing, while an animal like a rat can happily live and thrive in many ecosystems and is thus much more resistant to shocks in any given ecosystem.&lt;/p&gt;
&lt;p&gt;For some reason, that story convinced me to give Amazon a chance. Rather than focusing on a more niche area as defining &amp;ldquo;what I did&amp;rdquo; like &amp;ldquo;I&amp;rsquo;m the person who designs usability for mathematically intensive applications,&amp;rdquo; I instead built my career around solving hard technical problems regardless of the area.&lt;/p&gt;
&lt;h1 id=&#34;what-are-those-fungible-skills&#34;&gt;What are those fungible skills?&lt;/h1&gt;
&lt;p&gt;When I look back at the skills I learned in university, many of the specific technologies I learned never got used. I learned all about expert systems, but never built an expert system. I learned all about OpenGL, never used it. What I learned from my computer science courses that stuck was the more fundamental ideas of how to think about hard technical problems and create simple, workable solutions to them. For this reason, I often recommend to students who ask me which classes to take that it is more important to take a class that is difficult with a high degree of rigor that challenges you than to focus on any particular domain. Surprisingly, in retrospect, I&amp;rsquo;ve gotten as much use out of the philosophy classes I took—that CalPoly tried to kick me out for taking too many of—as I did my computer science classes. Learning critical thinking skills, how to navigate difficult ethical situations, how to communicate difficult ideas. When Amazon asked me to design a system that could fairly allocate scarce resources across competing teams, it wasn&amp;rsquo;t my coding skills that mattered most—it was my ability to think critically about the problem space and use data to understand and communicate trade-offs to executives who each thought their project was most important. What I&amp;rsquo;d say is my computer science skills were 95% of what initially got me in the door, but it was my liberal arts skills that dominated my later career.&lt;/p&gt;
&lt;p&gt;So my answer is, whatever you do, take on challenging problems, regardless of the area, so you can learn the meta-cognitive skills to understand how you learn and face up to these challenges. Learn critical thinking and how to tear apart problems to turn them from intractable to tractable. And don&amp;rsquo;t neglect the human-side of building your ability to communicate and deal ethically and fairly with others.&lt;/p&gt;
&lt;p&gt;Yes, LLMs are different from outsourcing or the dot-com bust. They can actually write code—not just cheaper, but instantaneously. And yes, I’ve seen the headlines: &lt;a href=&#34;https://www.washingtonpost.com/business/2025/03/14/programming-jobs-lost-artificial-intelligence/&#34;&gt;27% of programming jobs are gone&lt;/a&gt;, &lt;a href=&#34;https://wallstreetpit.com/127073-150k-software-engineer-turned-doordasher-after-800-ai-rejections/&#34;&gt;engineers facing hundreds of rejections&lt;/a&gt;. While I’m skeptical that this disruption is solely due to LLMs (e.g., a mix of post COVID overhiring, interest rate hikes, and broader economic shifts) there’s no doubt that a painful market correction is underway. But remember: every technological disruption feels unprecedented while it’s happening. The telephone operators watching automatic switches get installed thought their &lt;a href=&#34;https://thehistoryinsider.com/rise-fall-of-telephone-operators/&#34;&gt;world was ending&lt;/a&gt;. They were right about their specific job—wrong about their ability to adapt. The question isn’t whether LLMs will change things—they will. The question is whether you’ll be a koala or a rat when they do.&lt;/p&gt;
&lt;p&gt;So no, you&amp;rsquo;re not necessarily cooked. But you might be if you specialize too narrowly in whatever framework or language seems hot today. The jobs that are available will be different, and many of the existing software roles will not exist, at least in their current form. Build skills that transfer. Solve hard problems. Learn to think, not just code. The future needs people who can work with AI, not be replaced by it. And that future is built on the same foundation it always was: adaptability, critical thinking, and the uniquely human ability to navigate uncertainty with wisdom rather than fear.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to be a better software manager</title>
      <link>https://www.bonnycode.com/posts/how-to-be-a-better-software-manager/</link>
      <pubDate>Sun, 16 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.bonnycode.com/posts/how-to-be-a-better-software-manager/</guid>
      <description>&lt;p&gt;“My dev team is failing, what software process should we use to be more successful?”&lt;br&gt;
“My dev team keeps missing their deliverables, what task management software should I use so they hit their commitments?”&lt;br&gt;
“I’m not a very fast runner, what shoes should I buy to make me faster?”&lt;br&gt;
“I’m a horrible cook, what knife should I use to make a really tasty meal?”&lt;/p&gt;
&lt;p&gt;I get asked variations on these questions several times a month. You’d think by now I’d be better at answering them. Sadly, I still get this flutter of panic when I hear these questions where I run through my head the best way to unwind the web of assumptions behind these questions. This is where I begin visibly grimacing and possibly sighing. I then start responding with something like “well…. it depends… hmm…” And then I feel guilty for dodging the question when clearly they just want a simple answer and why won’t I just tell them the secret?&lt;/p&gt;
&lt;p&gt;The problem is software process, task management software, shoes, and knives are just tools. Having horrible tools can lead you to fail, but having great tools doesn’t make you succeed. What most people don’t want to hear is that success has more to do with preparation, persistence and a lot of hard work. There is no secret. I have learned a few lessons over the years though, and what follows is what I consider to be important when leading a successful development team.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You don’t manage a bad team to be good, you build a good team and it mostly ends up managing itself. People always tell me that the things I do only work because I have a good team. That is because at least 40% of my time is spent on strictly building the team. Recruiting, mentoring, coaching, training. These activities take time to come to fruition and hard work, so don’t expect immediate results. Your persistence will pay off though. One of the best ways to build your team is by giving them accountability so they can practice exercising good judgement. Too many managers hoard decision making, prioritization and return on investment analysis. For example, make someone on your team accountable for the operational excellence of your team. Work with them to establish metrics for their success, have them come up with and prioritize the activities that will improve operational excellence. Be their mentor or find them a good mentor so they are setup for success in their role, but don’t undermine their authority by overriding them. Do this with as much of your manager responsibilities as you possibly can and constantly give your team members more accountability as they grow. Keep doing it until you worry that you’ll have nothing left to do yourself.&lt;/li&gt;
&lt;li&gt;Craft a long, medium and short term vision by deeply understanding your customers. On each of these time horizons, members of the team should be able to answer the question “What value is my team providing?” and “What value should my team provide?” Ask yourself how your team can be even better. How could your team create even more value? Don’t just do this in a bubble but get out there and learn more about your customers. Read individual customer feedback and piece together patterns that allow your team to deliver even greater value. This isn&amp;rsquo;t a one time activity but a never ending journey of both refining your team&amp;rsquo;s vision and building relationships with your customers.&lt;/li&gt;
&lt;li&gt;It is critical that you understand the role of trust in creating your process. 90% of the process development teams build up is due to a lack of trust, both within the team and between the team and others. Detailed specifications are asked for because the people asking for functionality don’t trust the developers to build the right thing. Commitments are asked for because people don’t trust the developers to work hard and on the right priorities. These process artifacts take time though that take away from the time the team could be spending on creating more value. Ask yourself, is it possible that by building more trust we can run a lighter process that spends more time on creating value? This question should be approached honestly because the answer isn’t always yes but frequently is.&lt;/li&gt;
&lt;li&gt;Manage complexity through iteration, not planning. Most software is not simple and unambiguous. If you are have people using your software directly, it is almost guaranteed to be complex. Humans and their organizations are infallible generators of complexity. The more ambiguous or complex the problem the more aggressive you should be about iteration. Aggressive iteration means being unafraid of throwaway work for the sake of getting a feature out earlier. Aggressive iteration means actually getting the software used though, an unused feature is a feature you aren’t learning from. As a side benefit, iteration is a powerful way to generate trust with customers and management. A productive development team that is regularly demonstrating working, valuable functionality will be more appreciated and have more autonomy.&lt;/li&gt;
&lt;li&gt;Establish a planning horizon for your team that matches your business. Fast iteration isn&amp;rsquo;t an excuse for short term thinking. In my experience too many managers sacrifice long term value chasing after short term results. You need to consider the long term ramifications of your decisions. What is considered long term should match the context of your business. If you are in a fast moving startup that is trying to be the first to market, you should probably optimize for something closer to a 3 month planning horizon than a 3 year horizon. The shorter the planning horizon, the more you can ignore trust issues, technical debt, operational inefficiency, etc. because none of those will matter unless you have a successful product. On the other hand, if you are in a more stable environment with a long planning horizon, a heavy investment in operational efficiency and building trust will pay dividends and be much more cost effective in the long run.&lt;/li&gt;
&lt;li&gt;A team needs a way to understand their long term success. The mistake most people make is they focus first on what is measurable rather than what is important. This leads to ridiculous measures of value like lines of code, story points, estimated accuracy, etc. It can be hard to wrap your head around what success looks like though. Engage your team, your own managers and your customers with the same question. Eventually you&amp;rsquo;ll come to a true measure of your success. The benefit of having that measure goes beyond just knowing what success looks like though. It gives your team autonomy in how they accomplish that success. Without a valid measure of success, your team will be more subject to signing up for arbitrary project deliverables. With a measure of success though, you can commit yourself to that end result, but maintain the freedom along the way in the best way to accomplish it.&lt;/li&gt;
&lt;li&gt;Have fun, be ethical and treat people with respect. Seriously. You have only one life to live and the only measure of a well lived life is to be a good person doing good things. Never sacrifice that for creating more business value or other worldly success. I once worked for a company with massive internal strife. We argued endlessly about minutiae that seemed important at the time, gossiped, disrespected and hated each other. Everyone thought everyone else was an idiot. Then one day in the middle of all this we got called into a conference room to be told that our entire division had been laid off. All of a sudden our petty disagreements all went out the window and I once again saw my former coworkers as people again. I’m not saying to be soft, if someone isn’t delivering on a team then that needs to be dealt with, but that is never an excuse for disrespect.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And now you know what I’ve learned so far about how to lead successful software development teams.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A time to dream</title>
      <link>https://www.bonnycode.com/posts/a-time-to-dream/</link>
      <pubDate>Sun, 27 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://www.bonnycode.com/posts/a-time-to-dream/</guid>
      <description>&lt;p&gt;My success in life is based on my love and respect for daydreaming. I&amp;rsquo;ve always been a daydreamer. At the age of seven, I envisioned a space opera of powerful Lizians, Heart Monkeys and Star People who fought against the tyrannical Lizard Men. I loved this world and I visited every chance I got. I spent so much time fleshing out my world rather than school work that by the end of high school I had a written a truly intricate science fiction novel and I had the poor grades to show it. It was also an amazingly horrible novel. When I showed it to a girl I liked in high school, because high school chicks dig sci-fi authors, I couldn&amp;rsquo;t have anticipated the reaction, “I can&amp;rsquo;t believe you waste your time dreaming about stupid stuff like this.”&lt;/p&gt;
&lt;p&gt;To this day, I still waste most of my time “dreaming about stupid stuff.” Most of those dreams now involve my work rather than fantastical worlds, but the love is still there. I set aside several hours every week to dream about what could be. I sprawl out in these dreams, I linger, and I set no goals for myself in what I hope to accomplish. I ask myself, what would make this amazing? Why would that be amazing? What is the essence of amazingness? I go down every corridor, until I get to the essence of the problem and the solution. This isn&amp;rsquo;t work that can measured; this is my time to enjoy myself and untangle life&amp;rsquo;s truly difficult puzzles. It is during these times that I get excited about the potential of what could be.&lt;/p&gt;
&lt;p&gt;Without this time to dream, my work would have no direction. I would be subject to the whims of whomever is yelling the most at a particular moment or whatever crisis of the week has sprung up. Dreaming builds a vision and a vision creates purpose. When something urgent comes up, I can keep it in the context of whether it is truly more important than the great things I&amp;rsquo;ve envisioned.&lt;/p&gt;
&lt;p&gt;Where many other dreamers go wrong is their dreams stay dreams. I love my dreams, but I also respect them. That respect means that while I set aside time each week to dream, I spend the rest of my week making them happen. I temper my excitement for the amazingness of what could be by telling myself that greatness takes time. So I take the smallest step possible towards the dream that I can put into action. I then dream again the next week, but this time a smarter me is dreaming, informed by the realities of taking that small step forward. That smarter me comes up with an even better dream. Dream and reality march forward together as the work evolves, always daring to dream of perfection while letting reality take its time to get there. This constant cycle of vision and execution is what leads inevitably to success.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Throwaway Code: A Love Story</title>
      <link>https://www.bonnycode.com/posts/throwaway-code/</link>
      <pubDate>Sat, 28 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://www.bonnycode.com/posts/throwaway-code/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Throwaway Code&lt;/strong&gt;&lt;br&gt;
THrōəwā kōd&lt;br&gt;
&lt;em&gt;noun&lt;/em&gt; -  Code that is written to launch a feature early, but will later be deleted either due to a future feature or a new process.&lt;br&gt;
The BonnyCode Dictionary of Software Terms&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Not every love story is the same. There is the classic story of love at first sight. The love that feels destined and obvious from the very first moment. Source control was that way for me. I didn&amp;rsquo;t always use source control (gasp!), but I never went back once I did.&lt;/p&gt;
&lt;p&gt;I didn&amp;rsquo;t always love throwaway code. I may have occasionally flirted with throwaway code&amp;rsquo;s prettier cousin, the prototype, but I wouldn&amp;rsquo;t be caught dead with throwaway code. Today though? Throwaway code is one of the most powerful tools for a software developer. If I was on a desert island, and I was for some reason forced to do software development on that island, and for some reason I was limited in what abstract concepts I could take with me to that desert island, I would take throwaway code. And I would take long, romantic, moonlit walks on that beautiful desert island beach with throwaway code.&lt;/p&gt;
&lt;p&gt;How did I go from hating throwaway code to being soul mates? Throwaway code is so important because it is what makes iterative software development possible. The reason throwaway code is unappreciated, even in this age of Agile development, is because people don&amp;rsquo;t understand what it means to develop iteratively. Scientists have classified 3 stages of iterative development:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stage 1: Pretending&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When most teams first try scrum (aka Agile with training wheels), they take a surface level approach to the process. They pick some short iteration cycle, 1-week, 2-weeks or a month. Strangely, nobody ever picks 3-weeks. Anyways, they then run the same process they always did, they just associated the work with whatever iteration is in flight. For example, a sprint planning meeting will go something like this:&lt;/p&gt;
&lt;p&gt;“What are you working on this sprint?”&lt;/p&gt;
&lt;p&gt;“We are first working on testing the new Bear Translator functionality developed in the last sprint. We are then finishing up coding on the Bear Imagine functionality that we started two sprints ago but got delayed.”&lt;/p&gt;
&lt;p&gt;In the pretend stage of iterative development, iterations are treated more like time labels for when work occurred and a way of determining how often to have meetings to discuss what to work on. The work itself isn&amp;rsquo;t driven by the iterations though.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Stage 2: Done Done&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Teams advance from the pretending phase of iterative development to the done done phase. This phase is characterized by the following exchange occurring several times a sprint:&lt;/p&gt;
&lt;p&gt;“Is the Bear Translator done?”&lt;br&gt;
“Yes”&lt;br&gt;
“Is it done done?”&lt;br&gt;
“No”&lt;/p&gt;
&lt;p&gt;This makes up for the failings of the pretend stage by emphasizing that the goal is to finish work inside of the sprint boundaries. It enforces a good discipline on the team to finish features. There is a heavy emphasis in this stage on time-boxing. Unlike the previous stage, the time-boxed sprint becomes the main driver for how work is broken up and assigned.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Stage 3: Customer Use&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The final stage of iterative development moves from the frame of reference away from time-boxes towards minimizing the time before a customer gets value from the software. A typical exchange follows:&lt;/p&gt;
&lt;p&gt;“The Bear Translator feature is finished! Let&amp;rsquo;s party!”&lt;br&gt;
“That&amp;rsquo;s great, how many people have used it?”&lt;br&gt;
“Nobody, we don&amp;rsquo;t have a UI for interacting with it yet. We&amp;rsquo;ve only deployed the backend work.”&lt;br&gt;
“Party is over everyone, the feature isn&amp;rsquo;t actually finished.”&lt;br&gt;
&amp;lt;collective groan, people throwing red plastic cups at the developer for being lame&amp;gt;&lt;/p&gt;
&lt;p&gt;This stage emphasizes building the minimal customer-valuable feature and then iteratively building on that to provide more value. The training wheels are off at this point and the sprint time-boxes are no longer necessary. The discipline learned from progressing through Stage 2 is useful at this point though because the emphasis needs to remain on finishing features.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Most software teams are stuck somewhere between stages 1 and 2 of iterative development. Throwaway code appears as waste in these first two stages. If total value of a feature is measured as a typical manufacturing formula (Total Value = Manufacturing Rate * Value of Good), then any code that is thrown away is a loss on the expected total value. The secret to iterative development comes down to one concept. And it has little to do with the time-value of money or economic order quantities.&lt;/p&gt;
&lt;p&gt;The reason why iterative development is important is because s&lt;strong&gt;oftware requirements aren&amp;rsquo;t known until the software is used by customers.&lt;/strong&gt; I no longer say this phrase around experienced developers because it provokes an uncontrollable reaction to tell me war-stories about just how true it is. The period between software development and customer use is when software can go off track. The smaller you make the cycle between the two, the more likely you are developing the right thing. These constant checkpoints make sure you are pointed in the right direction.&lt;/p&gt;
&lt;p&gt;To get an intuitive sense of just how critical this is, you can try the following experiment at home. Get in your car (a bike will also work) and drive to a part of town you&amp;rsquo;ve been to before.&lt;/p&gt;
&lt;p&gt;First, to simulate non-iterative software development: while driving, close your eyes for 1 minute and open them for minute, then close them for a minute, etc. You&amp;rsquo;ll find that when your eyes were closed, you probably ran into a building, ran stop lights, endangered many lives including your own.&lt;/p&gt;
&lt;p&gt;Second, if you are still conscious, simulate iterative software development: while driving, close your eyes for 1 second, then open them for 1 second, etc. Despite your eyes being closed for the same amount of time as in the first example, you likely never ran off the road and, if you did hit someone, you probably meant to do it.&lt;/p&gt;
&lt;p&gt;This is the difference between iterative development and non-iterative development. You know that you are on track because you are getting constant feedback. And you are getting that feedback where it matters, from the people that will use your software. Iterative development is so critical to staying on track that I will write copious amount of throwaway code to make iterations short. The ironic thing is, the people that avoid throwaway code end up writing the most in the end. They just do it unintentionally because they write large amounts of code that never gets used because their feature was off-track from the beginning.&lt;/p&gt;
&lt;p&gt;I love writing throwaway code because it is this beautiful launch vehicle to get the code I want to last out there and used immediately. When I actively make the decision to write it, I know there is a good chance I&amp;rsquo;m on the right track.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cost benefit analysis for bear lovers</title>
      <link>https://www.bonnycode.com/posts/cost-benefit-analysis/</link>
      <pubDate>Sun, 25 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://www.bonnycode.com/posts/cost-benefit-analysis/</guid>
      <description>&lt;p&gt;Feature estimates are often blindly used for cost benefit analysis. This was no more apparent than when I once worked with a product manager named Bethany. She was responsible for what, in hindsight, was always a doomed social network for lovers of the North American Brown Bear. Bethany would routinely ask her developers to provide implementation costs for a long list of features. The developers would grumble and complain they need more detailed requirements before they can put together detailed estimates (because they had been burned in the past on being held to commitments based on changing scope). Bethany retorts that she just needs “T-shirt sizes”, which is code for wild ass guesses, so she can do cost benefit analysis. Logically, this makes sense. Like any savvy businesswoman, the product manager wants to get a return on her investment. You wouldn&amp;rsquo;t buy a piano without first knowing the price, right?&lt;/p&gt;
&lt;p&gt;The developer would always eventually relent and give her the feature estimates she asked for. The feature to let people upload pictures of their favorite bear for example would take 2 weeks to build. The feature to translate English into Bearease was estimated to take between 1 month and 2 years. The bear picture upload feature was a clear customer win and a frequent ask from the sites three customers, but the English to Bearease language translation was a real opportunity to differentiate their site from the other bear lover social networks. If the bearease translation feature cost only 1 month it made more sense to prioritize that feature, but not if it took 2 years.&lt;/p&gt;
&lt;p&gt;Bethany went back to the developers and asked why there was such a wide estimate in the translation feature and if there was a way to bring it down to the 1 month side. The developers came back with a bunch of mumbo jumbo about corpuses and having to maintain the translator by hand. They could develop a version of the feature in 1 month, but they wanted to do something fancier. Bethany heard that it could be done in 1 month if they really wanted to and said “go forth and develop my Bearease translator.” (she literally said that, it was weird then and it is weird now)&lt;/p&gt;
&lt;p&gt;A month later, as expected, the developers had cranked out a Bearease translator just like they said they would. Bethany and the developers had a big launch party, people drank a bit too much and they talked about all the money they were going to make when the site went IPO.&lt;/p&gt;
&lt;p&gt;Horribly hungover (likely due to the preponderance of blended whisky drinks), Bethany then tasked the developers to start working on the bear picture upload feature she had put off earlier. The developers went to work and two weeks later Bethany came back to check in on their launch. The developers said they were still working on it, and it would take them another two weeks. Bethany was furious. The feature was only supposed to take 2 weeks, she demanded to know why they couldn&amp;rsquo;t make their commitment. The developers started venting about how they were spending half their time maintaining the Bearease translator, constantly adding new words to the dictionary as users tried to translate words that they didn&amp;rsquo;t already have translations for. Bethany was angry at the developers for not being able to develop new features quickly enough and the developers were similarly angry they were spending so much of their time maintaining dictionaries rather than coding new features. They spent so much time being angry with each other that they stopped developing features all together. Facebook swooped in and stole their Bear loving user-base (with the ability to upload &lt;a href=&#34;http://upload.wikimedia.org/wikipedia/commons/6/6e/Bearclaw2.jpg&#34; title=&#34;Bear manicure&#34;&gt;bear pictures&lt;/a&gt; even!), and the rest is history.&lt;/p&gt;
&lt;p&gt;Bethany and the developers took away opposite lessons from the whole experience. Bethany said working with developers is lame because they are lazy and don&amp;rsquo;t understand business. She started her own hedge fund and now has a net worth measured in billions of dollars. The lesson the developers pulled from the experience was to never again do a feature quick and dirty, and the next time a product manager asks them to build a Bearease translator, they will say it takes 2 years, end of story.&lt;/p&gt;
&lt;p&gt;While Bethany can now afford to send several teams of highly trained ninja assassins my way for saying this, I put forth the contention that both Bethany and the developers pulled away the wrong lesson. Bethany&amp;rsquo;s real mistake was equating implementation cost with the true cost of a feature for cost benefit analysis. Software features, like most business investments, have operating costs associated with them. Those operating costs can vary wildly and there is frequently a trade off between initial investment cost and operating cost. If Bethany had taken into account the full cost of the features, she may have decided that uploading bear pictures was actually the wiser investment (something Facebook was smart enough to pick up on). Or at least she would have come in with the right expectation on what she was getting with her initial Bearease translator, and budgeted for followup work to make the feature more operationally maintainable if it was a success.&lt;/p&gt;
&lt;p&gt;The developers on the other hand learned too simplistic a lesson on technical debt. Technical debt, like any form of debt, is not evil. Without the ability to go into debt (i.e., taking out a loan), most new businesses couldn&amp;rsquo;t even get off the ground in the first place. If the demand for a Bearease translator was uncertain or if the immediate rush to market of being the first to have a Bearease translator justified it, the one month implementation with high technical debt could absolutely be the correct decision. For example, if they launched the Bearease translator and it completely tanked, they at least would have only lost out on 1 month of work rather than 2 years worth of work. Requirements and customer adoption are so subtly variable and changing in software development that this is often in fact the best approach to take. As long as ongoing operational cost is measured and time is continuously budgeted to reduce it, everyone can benefit from such a rapid iteration methodology.&lt;/p&gt;
&lt;p&gt;This post is also available in spoken &lt;a href=&#34;https://www.bonnycode.com/posts/rawr/&#34;&gt;Bearease&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Grr</title>
      <link>https://www.bonnycode.com/posts/rawr/</link>
      <pubDate>Sun, 25 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://www.bonnycode.com/posts/rawr/</guid>
      <description>&lt;p&gt;RAWWR!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How feature estimates killed Bobo</title>
      <link>https://www.bonnycode.com/posts/feature-estimates/</link>
      <pubDate>Sun, 24 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://www.bonnycode.com/posts/feature-estimates/</guid>
      <description>&lt;p&gt;Software development lacks a single meaningful, objective productivity metric. This is not for lack of trying. A productivity metric would make the life of a software development manager dramatically easier. Performance reviews? Just see who has the highest number. Need to find out how to boost productivity? Find the developer with the best process and have your other developers adopt it as a best practice. And so, managers grasp for measurement. Lines of code is so obviously wrong as a measurement that I&amp;rsquo;ve mostly heard it brought up for its comedic value. I&amp;rsquo;m not saying that in the history of software there hasn&amp;rsquo;t been some misguided manager who actually reviewed their developers by lines of code, but it is certainly more myth than reality in the modern era.&lt;/p&gt;
&lt;p&gt;I can&amp;rsquo;t say the same for effort estimation accuracy. Many otherwise intelligent managers have embraced the accuracy of their developers estimates as a defining measure of their developers worth. There are varying degrees of vigor attached  to this review. The energetic manager maintains a spreadsheet (or enlists a task tracking tool) to calculate every estimate given by their developer and then what the task actually came in at. At its most simplistic they might just divide the two numbers at that point and shoot see who deviates the most from 1 and apply the appropriate corrective action.&lt;/p&gt;
&lt;p&gt;Most managers aren&amp;rsquo;t quite so vigorous though. The belief in holding developers accountable to effort estimate accuracy is frequently enforced more subjectively.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Filbert, it looks like you&amp;rsquo;re past several features have all come in late. You need to start pulling your weight. Part of being a professional software developer is reliably hitting your commitments.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;And it&amp;rsquo;s true isn&amp;rsquo;t it? Promise you do something and then not do it and you&amp;rsquo;ll lose trust. The problem is why are software effort estimates treated as commitments in the first place? Most of this comes from the belief that deadlines are a necessary motivator. Modern society revolves around time starting with grade school. Teachers hand out homework and assign due dates.Tests are given at set times and students are taught to cram. This same philosophy extends to college and then to work. Without the pressure of time, people are trained to slack off. And so we create artificial deadlines as a motivational tool.&lt;/p&gt;
&lt;p&gt;And for some lines of work, that is necessary. Because a lot of work is really boring. But creating software is fun! Sure, it has its slow moments, but the best in the field are here because they love it. For an already self-motivated developer, the addition of the deadline constraint doesn&amp;rsquo;t make any additional work occur. It just prioritizes that dates are more important than quality.&lt;/p&gt;
&lt;p&gt;Hold up says the man in the back. I&amp;rsquo;m not making these estimates up, the developer is. I&amp;rsquo;m just asking them to reliably deliver. If I tell my boss I could have a budget out by next week, I&amp;rsquo;d be fired if I gave it to him a few weeks later. But again you get to the question of why this accountability matters. We always look to latch onto some more well established parallel for software development to better understand how we should treat it. Let&amp;rsquo;s flip that around and treat another field like software.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say that you own a craft dutch clog workshop. You have two shoe makers, Bobo and Jobo. Bobo says every day he is going to make 100 shoes and ends up making between 25 to 50. Jobo says he is going to make 5 shoes and always makes 5. The quality is exactly the same for both workers. There is such hot demand for the shoes that as soon as one is made it just flies off the shelves as &lt;code&gt;$200 per shoe&lt;/code&gt;. Both Bobo and Jobo are paid the same hourly wage of &lt;code&gt;$100/hour&lt;/code&gt; and the material cost for each shoe is &lt;code&gt;$10&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;From a naive cost perspective, Bobo makes shoes at a cost of &lt;code&gt;$10+(($100*8 hours)/(25 to 50))&lt;/code&gt; or &lt;code&gt;$26 to $42&lt;/code&gt;. For simplicity, let&amp;rsquo;s say that Bobo&amp;rsquo;s range of shoes made per hour follows a standard distribution so his average cost per shoe is &lt;code&gt;$31&lt;/code&gt;. Jobo makes shoes at a cost of &lt;code&gt;$10 + (($100*8 hours)/5)&lt;/code&gt; or &lt;code&gt;$170&lt;/code&gt;. Given their respective production rates, Bobo makes you a profit of &lt;code&gt;($200 - $31)*(25 to 50)&lt;/code&gt; or around &lt;code&gt;$6,000 per day&lt;/code&gt;. Jobo makes you a profit of &lt;code&gt;($200 - \$170)*5&lt;/code&gt; or &lt;code&gt;$150 per day&lt;/code&gt;. Now a lean manufacturing guru might say that Jobo is still better because reliability is more important than total throughput. Otherwise you end up with overproduction in one part of the system which then has associated inventory costs and other wastes. But in this case, that isn&amp;rsquo;t quite valid because both Bobo and Jobo are making the end product. And there is no inventory cost because the shoes sell as fast as they are made.&lt;/p&gt;
&lt;p&gt;In the end, Bobo makes his employer over 40 times as much money as Jobo does. Now let&amp;rsquo;s bring in the traditional software manager that uses estimate accuracy as their primary means of driving accountability. Jobo delivers to his estimates 100% of the time and is the model employee. Bobo though is a problem case. He is unreliable and is off on his estimates from 2x to 4x. After sending Bobo to an estimation training for 2 weeks, Bobo now estimates that he makes 37 shoes per day. And while on average this is correct, Bobo still sometimes makes as low as 25 clogs some days and as high as 50 clogs other days. The days he makes 50 clogs he is accused of sandbagging and the days he makes 25 he is just being lazy. This is still much too unreliable. Jobo is still the model employee and is given a raise. Bobo is on a performance improvement plan and asked why he can&amp;rsquo;t be more like Jobo. Bobo eventually gets smart and starts estimating that he can make 25 a day. As soon as he gets to 25 in a day he whips out the hammock and martini and enjoys the rest of his day. Now his estimate accuracy is 100% but his boss is angry that he sees Bobo in a hammock for a significant portion of every day. This is obviously unacceptable. Jobo on the other hand has been given several raises and is given a company luxury car to ensure his retention. Bobo finally realizes his boss doesn&amp;rsquo;t even care how many clogs he makes and just wants estimate accuracy. So he starts making 5 shoes a day like Jobo. He staggers the creation of each shoe slowly through the day and makes sure to always look like he is working. His boss is ecstatic, he is finally reliably hitting his estimates and working hard.&lt;/p&gt;
&lt;p&gt;Bobo quits a week later because he realizes all he ever loved was making clogs and it is mind numbing to work at a place where estimates matter more than the clogs. Bobo&amp;rsquo;s manager is lauded for his top-grading efforts. Bobo starts his own clog shop across the street and starts selling his clogs for &lt;code&gt;$150&lt;/code&gt;, still making a healthy profit. Bobo&amp;rsquo;s old clog shop can&amp;rsquo;t meet this new price without losing money per clog sold. Jobo&amp;rsquo;s manager, realizing the error of his ways and that there is no way he can compete with Bobo&amp;rsquo;s clog shop, murders Bobo and burns down his new shop. Jobo&amp;rsquo;s clog shop continues on for many years with a small but steady profit.&lt;/p&gt;
&lt;p&gt;It all seems so obvious in the world of clogs. But is software really much different or is it just harder to quantify the unit of production than in a world of widgets? It is often said that it is better to have an imperfect measure than no measure at all. But estimate accuracy isn&amp;rsquo;t an imperfect measure for software productivity, it is a completely orthogonal measure that actually drives down productivity. The only reason we are left with holding developers accountable to feature estimates is that their accuracy is necessary for some other purpose, such as the creation of project launch timelines or for cost-benefit analysis. I&amp;rsquo;ll tackle the flaws of these uses in my future posts.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
