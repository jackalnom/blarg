<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BonnyCode</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on BonnyCode</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language><atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Are we cooked?</title>
      <link>http://localhost:1313/posts/are_we_cooked/</link>
      <pubDate>Tue, 15 Jul 2025 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/are_we_cooked/</guid>
      <description>&lt;p&gt;My students frequently ask me what LLMs mean for them as future software developers and data scientists. With little exaggeration it often comes across something along the lines of &amp;ldquo;low-key, are we cooked?&amp;rdquo;. The last one, if you are not one of my students, translates in millennial to &amp;ldquo;good esteemed professor, tell me true, are we f#@ked?&amp;rdquo; While I&amp;rsquo;ve given various off-the-cuff answers, I feel inspired to be more thoughtful in putting down more complete thoughts.&lt;/p&gt;
&lt;h1 id=&#34;some-personal-background&#34;&gt;Some personal background&lt;/h1&gt;
&lt;p&gt;I want to start by giving a little personal history and just saying I understand the anxiety. I started my freshman year at CalPoly San Luis Obispo in Computer Science in September 1999. Like many of us older millennials that got into tech, I had been programming since elementary school (QBasic!) and computer science seemed a natural path. I always loved reading philosophy though and I seriously considered getting a philosophy degree instead. It was a choice between something I figured I was pretty decent at and could make money doing (computer science) and something that I was personally invested in but probably couldn&amp;rsquo;t make money with (philosophy). Earning a living won out over passion. I stuck with computer science, but I took as many philosophy classes as I could get into. To the extent that I was put on academic probation, not because my grades were too low, but because in the words of the admin &amp;ldquo;stop taking so many philosophy classes and just graduate!&amp;rdquo;. Good times…&lt;/p&gt;
&lt;p&gt;Within a year of starting my degree, the tech market fell out. March 2000, we saw the dotcom bust, and here I was a computer science student, kind of doing it for the money, kind of not, and my sure bet didn&amp;rsquo;t seem so sure anymore. We also saw a revival of the perennial bugaboo for American software developers: outsourcing. Every decade brought fresh panic that all programming jobs &lt;a href=&#34;https://developers.slashdot.org/story/04/10/15/1521231/us-programmers-an-endangered-species?sbsrc=thisday&#34;&gt;would&lt;/a&gt; &lt;a href=&#34;https://forio.com/about/blog/pitfalls-of-outsourcing-programmers/&#34;&gt;move&lt;/a&gt; to &lt;a href=&#34;https://www.nytimes.com/2003/12/07/business/business-who-wins-and-who-loses-as-jobs-move-overseas.html&#34;&gt;India&lt;/a&gt;, that American developers were too expensive, that we&amp;rsquo;d all be obsolete. I had to eat and had done a combination of construction and IT jobs up until that point and I was quickly burning through the savings I had built up from working. Luckily, I was able to convince one of my professors, Dr. Clint Staley, to whom I am forever grateful for many reasons, to let me interview for a startup he was running. Working that part-time while I went to school I was able to pay for myself, and momentum carried me forward to finishing my degree.&lt;/p&gt;
&lt;h1 id=&#34;are-we-cooked&#34;&gt;Are we cooked?&lt;/h1&gt;
&lt;p&gt;The best part about teaching in a university is you get to ramble. It is the single most defining characteristic of professors. But I&amp;rsquo;m sure at this point my students are asking: can you get to the point, are we cooked or not? I consider myself a skeptical optimist at heart. Meaning, I&amp;rsquo;m not inclined to believe that change is bad, but I&amp;rsquo;m also more cautious about predicting the future than others. Straightforwardly, that leads me to an answer of no, I don&amp;rsquo;t think you are cooked, but that doesn&amp;rsquo;t mean I can tell you with great certainty how things will play out. What I can do is point you towards the toolkit for how to make better decisions here.&lt;/p&gt;
&lt;h1 id=&#34;embracing-uncertainty&#34;&gt;Embracing uncertainty&lt;/h1&gt;
&lt;p&gt;Life is filled with uncertainty. Many people react irrationally to uncertainty, avoiding it too much or betting too much on luck. Learning how to deal rationally with uncertainty can give you an advantage throughout your life.&lt;/p&gt;
&lt;p&gt;From 2010 to 2016, I built and then led the supply chain and capacity planning systems for AWS Infrastructure. My biggest lesson is dollar for dollar, people are overly biased towards investing in prediction when they are often better suited to invest in flexibility. Time series forecasting tools take the past and extend it out to the future. The further out you go, the more variance you get. And black swan style events, like when &lt;a href=&#34;https://spectrum.ieee.org/the-lessons-of-thailands-flood&#34;&gt;Thailand becomes flooded&lt;/a&gt; and you lose most of the world&amp;rsquo;s hard-drive manufacturing capacity, are not frequent enough to learn from in a predictable way. Better to get a good enough forecast, but instead focus on shortening your lead-times, making your supply fungible—meaning interchangeable and adaptable to different uses—and late-binding your decisions as much as possible.&lt;/p&gt;
&lt;p&gt;The parallel to career planning is direct. You can spend a lot of time trying to accurately predict where LLMs will take the industry and the job market. But that will quickly hit diminishing returns. I would instead approach the question from the other angle: what skills are most likely to be durable and fungible—that is, transferable and valuable across different contexts—in a wide variety of potential outcomes? Going whole hog into &amp;ldquo;I&amp;rsquo;m going to build my career around being a React developer&amp;rdquo; is betting on one very specific outcome. If it pays off, great, you can probably command a premium if you turn out to be one of the world&amp;rsquo;s best React developers. But what happens when React joins jQuery in the graveyard of once-essential frameworks?&lt;/p&gt;
&lt;h1 id=&#34;an-interlude-about-koalas&#34;&gt;An Interlude about Koalas&lt;/h1&gt;
&lt;p&gt;When I graduated from college, I went to work for Lawrence Livermore National Labs as a computer scientist. I was working on translating large-scale semantic graph algorithms into usable interfaces for intelligence analysts. I had personally received an award from the Secretary of Homeland Security. We had the academic freedom to explore whatever angles we wanted. There was little pressure to meet deadlines. It felt like a safe and secure job for life working in my little niche. My former professor and boss, Dr. Staley, called me up and said his new startup was just acquired by some struggling online bookseller called Amazon. I wasn&amp;rsquo;t super interested, as I could see existing in my current niche for my whole life.&lt;/p&gt;
&lt;p&gt;He convinced me to join by telling me a story about koalas. Koalas primarily subsist on eucalyptus leaves. Most other animals don&amp;rsquo;t eat eucalyptus, because they have little to no nutrition and they are kind of toxic. But koalas have built their entire evolutionary strategy around being the ones to eat eucalyptus leaves. This has been a great and successful strategy for koalas. But what happens if the eucalyptus forest goes away? Koalas are screwed. Does that mean koalas are actually in danger? No, but it does mean their fate is entirely bound to that one food source existing, while an animal like a rat can happily live and thrive in many ecosystems and is thus much more resistant to shocks in any given ecosystem.&lt;/p&gt;
&lt;p&gt;For some reason, that story convinced me to give Amazon a chance. Rather than focusing on a more niche area as defining &amp;ldquo;what I did&amp;rdquo; like &amp;ldquo;I&amp;rsquo;m the person who designs usability for mathematically intensive applications,&amp;rdquo; I instead built my career around solving hard technical problems regardless of the area.&lt;/p&gt;
&lt;h1 id=&#34;what-are-those-fungible-skills&#34;&gt;What are those fungible skills?&lt;/h1&gt;
&lt;p&gt;When I look back at the skills I learned in university, many of the specific technologies I learned never got used. I learned all about expert systems, but never built an expert system. I learned all about OpenGL, never used it. What I learned from my computer science courses that stuck was the more fundamental ideas of how to think about hard technical problems and create simple, workable solutions to them. For this reason, I often recommend to students who ask me which classes to take that it is more important to take a class that is difficult with a high degree of rigor that challenges you than to focus on any particular domain. Surprisingly, in retrospect, I&amp;rsquo;ve gotten as much use out of the philosophy classes I took—that CalPoly tried to kick me out for taking too many of—as I did my computer science classes. Learning critical thinking skills, how to navigate difficult ethical situations, how to communicate difficult ideas. When Amazon asked me to design a system that could fairly allocate scarce resources across competing teams, it wasn&amp;rsquo;t my coding skills that mattered most—it was my ability to think critically about the problem space and use data to understand and communicate trade-offs to executives who each thought their project was most important. What I&amp;rsquo;d say is my computer science skills were 95% of what initially got me in the door, but it was my liberal arts skills that dominated my later career.&lt;/p&gt;
&lt;p&gt;So my answer is, whatever you do, take on challenging problems, regardless of the area, so you can learn the meta-cognitive skills to understand how you learn and face up to these challenges. Learn critical thinking and how to tear apart problems to turn them from intractable to tractable. And don&amp;rsquo;t neglect the human-side of building your ability to communicate and deal ethically and fairly with others.&lt;/p&gt;
&lt;p&gt;Yes, LLMs are different from outsourcing or the dotcom bust. They can actually write code, not just cheaper but instantaneously. And yes, I&amp;rsquo;ve seen the statistics—27% of programming jobs gone, engineers with hundreds of rejections living in RVs. This disruption is real and painful. But remember: every technological disruption feels unprecedented to those living through it. The telephone operators watching automatic switches get installed thought their world was ending too. They were right about their specific job, wrong about their ability to adapt. The question isn&amp;rsquo;t whether LLMs will change things—they will. The question is whether you&amp;rsquo;ll be a koala or a rat when they do.&lt;/p&gt;
&lt;p&gt;So no, you&amp;rsquo;re not necessarily cooked. But you might be if you specialize too narrowly in whatever framework or language seems hot today. The jobs that are available will be different, and many of the existing software roles will not exist, at least in their current form. Build skills that transfer. Solve hard problems. Learn to think, not just code. The future needs people who can work with AI, not be replaced by it. And that future is built on the same foundation it always was: adaptability, critical thinking, and the uniquely human ability to navigate uncertainty with wisdom rather than fear.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to be a better software manager</title>
      <link>http://localhost:1313/posts/how-to-be-a-better-software-manager/</link>
      <pubDate>Sun, 16 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/how-to-be-a-better-software-manager/</guid>
      <description>&lt;p&gt;“My dev team is failing, what software process should we use to be more successful?”&lt;br&gt;
“My dev team keeps missing their deliverables, what task management software should I use so they hit their commitments?”&lt;br&gt;
“I’m not a very fast runner, what shoes should I buy to make me faster?”&lt;br&gt;
“I’m a horrible cook, what knife should I use to make a really tasty meal?”&lt;/p&gt;
&lt;p&gt;I get asked variations on these questions several times a month. You’d think by now I’d be better at answering them. Sadly, I still get this flutter of panic when I hear these questions where I run through my head the best way to unwind the web of assumptions behind these questions. This is where I begin visibly grimacing and possibly sighing. I then start responding with something like “well…. it depends… hmm…” And then I feel guilty for dodging the question when clearly they just want a simple answer and why won’t I just tell them the secret?&lt;/p&gt;
&lt;p&gt;The problem is software process, task management software, shoes, and knives are just tools. Having horrible tools can lead you to fail, but having great tools doesn’t make you succeed. What most people don’t want to hear is that success has more to do with preparation, persistence and a lot of hard work. There is no secret. I have learned a few lessons over the years though, and what follows is what I consider to be important when leading a successful development team.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You don’t manage a bad team to be good, you build a good team and it mostly ends up managing itself. People always tell me that the things I do only work because I have a good team. That is because at least 40% of my time is spent on strictly building the team. Recruiting, mentoring, coaching, training. These activities take time to come to fruition and hard work, so don’t expect immediate results. Your persistence will pay off though. One of the best ways to build your team is by giving them accountability so they can practice exercising good judgement. Too many managers hoard decision making, prioritization and return on investment analysis. For example, make someone on your team accountable for the operational excellence of your team. Work with them to establish metrics for their success, have them come up with and prioritize the activities that will improve operational excellence. Be their mentor or find them a good mentor so they are setup for success in their role, but don’t undermine their authority by overriding them. Do this with as much of your manager responsibilities as you possibly can and constantly give your team members more accountability as they grow. Keep doing it until you worry that you’ll have nothing left to do yourself.&lt;/li&gt;
&lt;li&gt;Craft a long, medium and short term vision by deeply understanding your customers. On each of these time horizons, members of the team should be able to answer the question “What value is my team providing?” and “What value should my team provide?” Ask yourself how your team can be even better. How could your team create even more value? Don’t just do this in a bubble but get out there and learn more about your customers. Read individual customer feedback and piece together patterns that allow your team to deliver even greater value. This isn&amp;rsquo;t a one time activity but a never ending journey of both refining your team&amp;rsquo;s vision and building relationships with your customers.&lt;/li&gt;
&lt;li&gt;It is critical that you understand the role of trust in creating your process. 90% of the process development teams build up is due to a lack of trust, both within the team and between the team and others. Detailed specifications are asked for because the people asking for functionality don’t trust the developers to build the right thing. Commitments are asked for because people don’t trust the developers to work hard and on the right priorities. These process artifacts take time though that take away from the time the team could be spending on creating more value. Ask yourself, is it possible that by building more trust we can run a lighter process that spends more time on creating value? This question should be approached honestly because the answer isn’t always yes but frequently is.&lt;/li&gt;
&lt;li&gt;Manage complexity through iteration, not planning. Most software is not simple and unambiguous. If you are have people using your software directly, it is almost guaranteed to be complex. Humans and their organizations are infallible generators of complexity. The more ambiguous or complex the problem the more aggressive you should be about iteration. Aggressive iteration means being unafraid of throwaway work for the sake of getting a feature out earlier. Aggressive iteration means actually getting the software used though, an unused feature is a feature you aren’t learning from. As a side benefit, iteration is a powerful way to generate trust with customers and management. A productive development team that is regularly demonstrating working, valuable functionality will be more appreciated and have more autonomy.&lt;/li&gt;
&lt;li&gt;Establish a planning horizon for your team that matches your business. Fast iteration isn&amp;rsquo;t an excuse for short term thinking. In my experience too many managers sacrifice long term value chasing after short term results. You need to consider the long term ramifications of your decisions. What is considered long term should match the context of your business. If you are in a fast moving startup that is trying to be the first to market, you should probably optimize for something closer to a 3 month planning horizon than a 3 year horizon. The shorter the planning horizon, the more you can ignore trust issues, technical debt, operational inefficiency, etc. because none of those will matter unless you have a successful product. On the other hand, if you are in a more stable environment with a long planning horizon, a heavy investment in operational efficiency and building trust will pay dividends and be much more cost effective in the long run.&lt;/li&gt;
&lt;li&gt;A team needs a way to understand their long term success. The mistake most people make is they focus first on what is measurable rather than what is important. This leads to ridiculous measures of value like lines of code, story points, estimated accuracy, etc. It can be hard to wrap your head around what success looks like though. Engage your team, your own managers and your customers with the same question. Eventually you&amp;rsquo;ll come to a true measure of your success. The benefit of having that measure goes beyond just knowing what success looks like though. It gives your team autonomy in how they accomplish that success. Without a valid measure of success, your team will be more subject to signing up for arbitrary project deliverables. With a measure of success though, you can commit yourself to that end result, but maintain the freedom along the way in the best way to accomplish it.&lt;/li&gt;
&lt;li&gt;Have fun, be ethical and treat people with respect. Seriously. You have only one life to live and the only measure of a well lived life is to be a good person doing good things. Never sacrifice that for creating more business value or other worldly success. I once worked for a company with massive internal strife. We argued endlessly about minutiae that seemed important at the time, gossiped, disrespected and hated each other. Everyone thought everyone else was an idiot. Then one day in the middle of all this we got called into a conference room to be told that our entire division had been laid off. All of a sudden our petty disagreements all went out the window and I once again saw my former coworkers as people again. I’m not saying to be soft, if someone isn’t delivering on a team then that needs to be dealt with, but that is never an excuse for disrespect.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And now you know what I’ve learned so far about how to lead successful software development teams.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A time to dream</title>
      <link>http://localhost:1313/posts/a-time-to-dream/</link>
      <pubDate>Sun, 27 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/a-time-to-dream/</guid>
      <description>&lt;p&gt;My success in life is based on my love and respect for daydreaming. I&amp;rsquo;ve always been a daydreamer. At the age of seven, I envisioned a space opera of powerful Lizians, Heart Monkeys and Star People who fought against the tyrannical Lizard Men. I loved this world and I visited every chance I got. I spent so much time fleshing out my world rather than school work that by the end of high school I had a written a truly intricate science fiction novel and I had the poor grades to show it. It was also an amazingly horrible novel. When I showed it to a girl I liked in high school, because high school chicks dig sci-fi authors, I couldn&amp;rsquo;t have anticipated the reaction, “I can&amp;rsquo;t believe you waste your time dreaming about stupid stuff like this.”&lt;/p&gt;
&lt;p&gt;To this day, I still waste most of my time “dreaming about stupid stuff.” Most of those dreams now involve my work rather than fantastical worlds, but the love is still there. I set aside several hours every week to dream about what could be. I sprawl out in these dreams, I linger, and I set no goals for myself in what I hope to accomplish. I ask myself, what would make this amazing? Why would that be amazing? What is the essence of amazingness? I go down every corridor, until I get to the essence of the problem and the solution. This isn&amp;rsquo;t work that can measured; this is my time to enjoy myself and untangle life&amp;rsquo;s truly difficult puzzles. It is during these times that I get excited about the potential of what could be.&lt;/p&gt;
&lt;p&gt;Without this time to dream, my work would have no direction. I would be subject to the whims of whomever is yelling the most at a particular moment or whatever crisis of the week has sprung up. Dreaming builds a vision and a vision creates purpose. When something urgent comes up, I can keep it in the context of whether it is truly more important than the great things I&amp;rsquo;ve envisioned.&lt;/p&gt;
&lt;p&gt;Where many other dreamers go wrong is their dreams stay dreams. I love my dreams, but I also respect them. That respect means that while I set aside time each week to dream, I spend the rest of my week making them happen. I temper my excitement for the amazingness of what could be by telling myself that greatness takes time. So I take the smallest step possible towards the dream that I can put into action. I then dream again the next week, but this time a smarter me is dreaming, informed by the realities of taking that small step forward. That smarter me comes up with an even better dream. Dream and reality march forward together as the work evolves, always daring to dream of perfection while letting reality take its time to get there. This constant cycle of vision and execution is what leads inevitably to success.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Throwaway Code: A Love Story</title>
      <link>http://localhost:1313/posts/throwaway-code/</link>
      <pubDate>Sat, 28 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/throwaway-code/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Throwaway Code&lt;/strong&gt;&lt;br&gt;
THrōəwā kōd&lt;br&gt;
&lt;em&gt;noun&lt;/em&gt; -  Code that is written to launch a feature early, but will later be deleted either due to a future feature or a new process.&lt;br&gt;
The BonnyCode Dictionary of Software Terms&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Not every love story is the same. There is the classic story of love at first sight. The love that feels destined and obvious from the very first moment. Source control was that way for me. I didn&amp;rsquo;t always use source control (gasp!), but I never went back once I did.&lt;/p&gt;
&lt;p&gt;I didn&amp;rsquo;t always love throwaway code. I may have occasionally flirted with throwaway code&amp;rsquo;s prettier cousin, the prototype, but I wouldn&amp;rsquo;t be caught dead with throwaway code. Today though? Throwaway code is one of the most powerful tools for a software developer. If I was on a desert island, and I was for some reason forced to do software development on that island, and for some reason I was limited in what abstract concepts I could take with me to that desert island, I would take throwaway code. And I would take long, romantic, moonlit walks on that beautiful desert island beach with throwaway code.&lt;/p&gt;
&lt;p&gt;How did I go from hating throwaway code to being soul mates? Throwaway code is so important because it is what makes iterative software development possible. The reason throwaway code is unappreciated, even in this age of Agile development, is because people don&amp;rsquo;t understand what it means to develop iteratively. Scientists have classified 3 stages of iterative development:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stage 1: Pretending&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When most teams first try scrum (aka Agile with training wheels), they take a surface level approach to the process. They pick some short iteration cycle, 1-week, 2-weeks or a month. Strangely, nobody ever picks 3-weeks. Anyways, they then run the same process they always did, they just associated the work with whatever iteration is in flight. For example, a sprint planning meeting will go something like this:&lt;/p&gt;
&lt;p&gt;“What are you working on this sprint?”&lt;/p&gt;
&lt;p&gt;“We are first working on testing the new Bear Translator functionality developed in the last sprint. We are then finishing up coding on the Bear Imagine functionality that we started two sprints ago but got delayed.”&lt;/p&gt;
&lt;p&gt;In the pretend stage of iterative development, iterations are treated more like time labels for when work occurred and a way of determining how often to have meetings to discuss what to work on. The work itself isn&amp;rsquo;t driven by the iterations though.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Stage 2: Done Done&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Teams advance from the pretending phase of iterative development to the done done phase. This phase is characterized by the following exchange occurring several times a sprint:&lt;/p&gt;
&lt;p&gt;“Is the Bear Translator done?”&lt;br&gt;
“Yes”&lt;br&gt;
“Is it done done?”&lt;br&gt;
“No”&lt;/p&gt;
&lt;p&gt;This makes up for the failings of the pretend stage by emphasizing that the goal is to finish work inside of the sprint boundaries. It enforces a good discipline on the team to finish features. There is a heavy emphasis in this stage on time-boxing. Unlike the previous stage, the time-boxed sprint becomes the main driver for how work is broken up and assigned.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Stage 3: Customer Use&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The final stage of iterative development moves from the frame of reference away from time-boxes towards minimizing the time before a customer gets value from the software. A typical exchange follows:&lt;/p&gt;
&lt;p&gt;“The Bear Translator feature is finished! Let&amp;rsquo;s party!”&lt;br&gt;
“That&amp;rsquo;s great, how many people have used it?”&lt;br&gt;
“Nobody, we don&amp;rsquo;t have a UI for interacting with it yet. We&amp;rsquo;ve only deployed the backend work.”&lt;br&gt;
“Party is over everyone, the feature isn&amp;rsquo;t actually finished.”&lt;br&gt;
&amp;lt;collective groan, people throwing red plastic cups at the developer for being lame&amp;gt;&lt;/p&gt;
&lt;p&gt;This stage emphasizes building the minimal customer-valuable feature and then iteratively building on that to provide more value. The training wheels are off at this point and the sprint time-boxes are no longer necessary. The discipline learned from progressing through Stage 2 is useful at this point though because the emphasis needs to remain on finishing features.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Most software teams are stuck somewhere between stages 1 and 2 of iterative development. Throwaway code appears as waste in these first two stages. If total value of a feature is measured as a typical manufacturing formula (Total Value = Manufacturing Rate * Value of Good), then any code that is thrown away is a loss on the expected total value. The secret to iterative development comes down to one concept. And it has little to do with the time-value of money or economic order quantities.&lt;/p&gt;
&lt;p&gt;The reason why iterative development is important is because s&lt;strong&gt;oftware requirements aren&amp;rsquo;t known until the software is used by customers.&lt;/strong&gt; I no longer say this phrase around experienced developers because it provokes an uncontrollable reaction to tell me war-stories about just how true it is. The period between software development and customer use is when software can go off track. The smaller you make the cycle between the two, the more likely you are developing the right thing. These constant checkpoints make sure you are pointed in the right direction.&lt;/p&gt;
&lt;p&gt;To get an intuitive sense of just how critical this is, you can try the following experiment at home. Get in your car (a bike will also work) and drive to a part of town you&amp;rsquo;ve been to before.&lt;/p&gt;
&lt;p&gt;First, to simulate non-iterative software development: while driving, close your eyes for 1 minute and open them for minute, then close them for a minute, etc. You&amp;rsquo;ll find that when your eyes were closed, you probably ran into a building, ran stop lights, endangered many lives including your own.&lt;/p&gt;
&lt;p&gt;Second, if you are still conscious, simulate iterative software development: while driving, close your eyes for 1 second, then open them for 1 second, etc. Despite your eyes being closed for the same amount of time as in the first example, you likely never ran off the road and, if you did hit someone, you probably meant to do it.&lt;/p&gt;
&lt;p&gt;This is the difference between iterative development and non-iterative development. You know that you are on track because you are getting constant feedback. And you are getting that feedback where it matters, from the people that will use your software. Iterative development is so critical to staying on track that I will write copious amount of throwaway code to make iterations short. The ironic thing is, the people that avoid throwaway code end up writing the most in the end. They just do it unintentionally because they write large amounts of code that never gets used because their feature was off-track from the beginning.&lt;/p&gt;
&lt;p&gt;I love writing throwaway code because it is this beautiful launch vehicle to get the code I want to last out there and used immediately. When I actively make the decision to write it, I know there is a good chance I&amp;rsquo;m on the right track.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cost benefit analysis for bear lovers</title>
      <link>http://localhost:1313/posts/cost-benefit-analysis/</link>
      <pubDate>Sun, 25 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/cost-benefit-analysis/</guid>
      <description>&lt;p&gt;Feature estimates are often blindly used for cost benefit analysis. This was no more apparent than when I once worked with a product manager named Bethany. She was responsible for what, in hindsight, was always a doomed social network for lovers of the North American Brown Bear. Bethany would routinely ask her developers to provide implementation costs for a long list of features. The developers would grumble and complain they need more detailed requirements before they can put together detailed estimates (because they had been burned in the past on being held to commitments based on changing scope). Bethany retorts that she just needs “T-shirt sizes”, which is code for wild ass guesses, so she can do cost benefit analysis. Logically, this makes sense. Like any savvy businesswoman, the product manager wants to get a return on her investment. You wouldn&amp;rsquo;t buy a piano without first knowing the price, right?&lt;/p&gt;
&lt;p&gt;The developer would always eventually relent and give her the feature estimates she asked for. The feature to let people upload pictures of their favorite bear for example would take 2 weeks to build. The feature to translate English into Bearease was estimated to take between 1 month and 2 years. The bear picture upload feature was a clear customer win and a frequent ask from the sites three customers, but the English to Bearease language translation was a real opportunity to differentiate their site from the other bear lover social networks. If the bearease translation feature cost only 1 month it made more sense to prioritize that feature, but not if it took 2 years.&lt;/p&gt;
&lt;p&gt;Bethany went back to the developers and asked why there was such a wide estimate in the translation feature and if there was a way to bring it down to the 1 month side. The developers came back with a bunch of mumbo jumbo about corpuses and having to maintain the translator by hand. They could develop a version of the feature in 1 month, but they wanted to do something fancier. Bethany heard that it could be done in 1 month if they really wanted to and said “go forth and develop my Bearease translator.” (she literally said that, it was weird then and it is weird now)&lt;/p&gt;
&lt;p&gt;A month later, as expected, the developers had cranked out a Bearease translator just like they said they would. Bethany and the developers had a big launch party, people drank a bit too much and they talked about all the money they were going to make when the site went IPO.&lt;/p&gt;
&lt;p&gt;Horribly hungover (likely due to the preponderance of blended whisky drinks), Bethany then tasked the developers to start working on the bear picture upload feature she had put off earlier. The developers went to work and two weeks later Bethany came back to check in on their launch. The developers said they were still working on it, and it would take them another two weeks. Bethany was furious. The feature was only supposed to take 2 weeks, she demanded to know why they couldn&amp;rsquo;t make their commitment. The developers started venting about how they were spending half their time maintaining the Bearease translator, constantly adding new words to the dictionary as users tried to translate words that they didn&amp;rsquo;t already have translations for. Bethany was angry at the developers for not being able to develop new features quickly enough and the developers were similarly angry they were spending so much of their time maintaining dictionaries rather than coding new features. They spent so much time being angry with each other that they stopped developing features all together. Facebook swooped in and stole their Bear loving user-base (with the ability to upload &lt;a href=&#34;http://upload.wikimedia.org/wikipedia/commons/6/6e/Bearclaw2.jpg&#34; title=&#34;Bear manicure&#34;&gt;bear pictures&lt;/a&gt; even!), and the rest is history.&lt;/p&gt;
&lt;p&gt;Bethany and the developers took away opposite lessons from the whole experience. Bethany said working with developers is lame because they are lazy and don&amp;rsquo;t understand business. She started her own hedge fund and now has a net worth measured in billions of dollars. The lesson the developers pulled from the experience was to never again do a feature quick and dirty, and the next time a product manager asks them to build a Bearease translator, they will say it takes 2 years, end of story.&lt;/p&gt;
&lt;p&gt;While Bethany can now afford to send several teams of highly trained ninja assassins my way for saying this, I put forth the contention that both Bethany and the developers pulled away the wrong lesson. Bethany&amp;rsquo;s real mistake was equating implementation cost with the true cost of a feature for cost benefit analysis. Software features, like most business investments, have operating costs associated with them. Those operating costs can vary wildly and there is frequently a trade off between initial investment cost and operating cost. If Bethany had taken into account the full cost of the features, she may have decided that uploading bear pictures was actually the wiser investment (something Facebook was smart enough to pick up on). Or at least she would have come in with the right expectation on what she was getting with her initial Bearease translator, and budgeted for followup work to make the feature more operationally maintainable if it was a success.&lt;/p&gt;
&lt;p&gt;The developers on the other hand learned too simplistic a lesson on technical debt. Technical debt, like any form of debt, is not evil. Without the ability to go into debt (i.e., taking out a loan), most new businesses couldn&amp;rsquo;t even get off the ground in the first place. If the demand for a Bearease translator was uncertain or if the immediate rush to market of being the first to have a Bearease translator justified it, the one month implementation with high technical debt could absolutely be the correct decision. For example, if they launched the Bearease translator and it completely tanked, they at least would have only lost out on 1 month of work rather than 2 years worth of work. Requirements and customer adoption are so subtly variable and changing in software development that this is often in fact the best approach to take. As long as ongoing operational cost is measured and time is continuously budgeted to reduce it, everyone can benefit from such a rapid iteration methodology.&lt;/p&gt;
&lt;p&gt;This post is also available in spoken &lt;a href=&#34;http://www.youtube.com/watch?v=vAx6WqymurM&#34; title=&#34;Cost benefit analysis for bear lovers [Bearease]&#34;&gt;Bearease&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How feature estimates killed Bobo</title>
      <link>http://localhost:1313/posts/feature-estimates/</link>
      <pubDate>Sun, 24 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/feature-estimates/</guid>
      <description>&lt;p&gt;Software development lacks a single meaningful, objective productivity metric. This is not for lack of trying. A productivity metric would make the life of a software development manager dramatically easier. Performance reviews? Just see who has the highest number. Need to find out how to boost productivity? Find the developer with the best process and have your other developers adopt it as a best practice. And so, managers grasp for measurement. Lines of code is so obviously wrong as a measurement that I&amp;rsquo;ve mostly heard it brought up for its comedic value. I&amp;rsquo;m not saying that in the history of software there hasn&amp;rsquo;t been some misguided manager who actually reviewed their developers by lines of code, but it is certainly more myth than reality in the modern era.&lt;/p&gt;
&lt;p&gt;I can&amp;rsquo;t say the same for effort estimation accuracy. Many otherwise intelligent managers have embraced the accuracy of their developers estimates as a defining measure of their developers worth. There are varying degrees of vigor attached  to this review. The energetic manager maintains a spreadsheet (or enlists a task tracking tool) to calculate every estimate given by their developer and then what the task actually came in at. At its most simplistic they might just divide the two numbers at that point and shoot see who deviates the most from 1 and apply the appropriate corrective action.&lt;/p&gt;
&lt;p&gt;Most managers aren&amp;rsquo;t quite so vigorous though. The belief in holding developers accountable to effort estimate accuracy is frequently enforced more subjectively.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Filbert, it looks like you&amp;rsquo;re past several features have all come in late. You need to start pulling your weight. Part of being a professional software developer is reliably hitting your commitments.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;And it&amp;rsquo;s true isn&amp;rsquo;t it? Promise you do something and then not do it and you&amp;rsquo;ll lose trust. The problem is why are software effort estimates treated as commitments in the first place? Most of this comes from the belief that deadlines are a necessary motivator. Modern society revolves around time starting with grade school. Teachers hand out homework and assign due dates.Tests are given at set times and students are taught to cram. This same philosophy extends to college and then to work. Without the pressure of time, people are trained to slack off. And so we create artificial deadlines as a motivational tool.&lt;/p&gt;
&lt;p&gt;And for some lines of work, that is necessary. Because a lot of work is really boring. But creating software is fun! Sure, it has its slow moments, but the best in the field are here because they love it. For an already self-motivated developer, the addition of the deadline constraint doesn&amp;rsquo;t make any additional work occur. It just prioritizes that dates are more important than quality.&lt;/p&gt;
&lt;p&gt;Hold up says the man in the back. I&amp;rsquo;m not making these estimates up, the developer is. I&amp;rsquo;m just asking them to reliably deliver. If I tell my boss I could have a budget out by next week, I&amp;rsquo;d be fired if I gave it to him a few weeks later. But again you get to the question of why this accountability matters. We always look to latch onto some more well established parallel for software development to better understand how we should treat it. Let&amp;rsquo;s flip that around and treat another field like software.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say that you own a craft dutch clog workshop. You have two shoe makers, Bobo and Jobo. Bobo says every day he is going to make 100 shoes and ends up making between 25 to 50. Jobo says he is going to make 5 shoes and always makes 5. The quality is exactly the same for both workers. There is such hot demand for the shoes that as soon as one is made it just flies off the shelves as $200 per shoe. Both Bobo and Jobo are paid the same hourly wage of $100/hour and the material cost for each shoe is $10.&lt;/p&gt;
&lt;p&gt;From a naive cost perspective, Bobo makes shoes at a cost of $10+(($100*8 hours)/(25 to 50)) or $26 to $42. For simplicity, let&amp;rsquo;s say that Bobo&amp;rsquo;s range of shoes made per hour follows a standard distribution so his average cost per shoe is $31. Jobo makes shoes at a cost of $10 + (($100*8 hours)/5) or $170. Given their respective production rates, Bobo makes you a profit of ($200 - $31)*(25 to 50) or around $6,000 per day. Jobo makes you a profit of ($200 - $170)*5 or $150 per day. Now a lean manufacturing guru might say that Jobo is still better because reliability is more important than total throughput. Otherwise you end up with overproduction in one part of the system which then has associated inventory costs and other wastes. But in this case, that isn&amp;rsquo;t quite valid because both Bobo and Jobo are making the end product. And there is no inventory cost because the shoes sell as fast as they are made.&lt;/p&gt;
&lt;p&gt;In the end, Bobo makes his employer over 40 times as much money as Jobo does. Now let&amp;rsquo;s bring in the traditional software manager that uses estimate accuracy as their primary means of driving accountability. Jobo delivers to his estimates 100% of the time and is the model employee. Bobo though is a problem case. He is unreliable and is off on his estimates from 2x to 4x. After sending Bobo to an estimation training for 2 weeks, Bobo now estimates that he makes 37 shoes per day. And while on average this is correct, Bobo still sometimes makes as low as 25 clogs some days and as high as 50 clogs other days. The days he makes 50 clogs he is accused of sandbagging and the days he makes 25 he is just being lazy. This is still much too unreliable. Jobo is still the model employee and is given a raise. Bobo is on a performance improvement plan and asked why he can&amp;rsquo;t be more like Jobo. Bobo eventually gets smart and starts estimating that he can make 25 a day. As soon as he gets to 25 in a day he whips out the hammock and martini and enjoys the rest of his day. Now his estimate accuracy is 100% but his boss is angry that he sees Bobo in a hammock for a significant portion of every day. This is obviously unacceptable. Jobo on the other hand has been given several raises and is given a company luxury car to ensure his retention. Bobo finally realizes his boss doesn&amp;rsquo;t even care how many clogs he makes and just wants estimate accuracy. So he starts making 5 shoes a day like Jobo. He staggers the creation of each shoe slowly through the day and makes sure to always look like he is working. His boss is ecstatic, he is finally reliably hitting his estimates and working hard.&lt;/p&gt;
&lt;p&gt;Bobo quits a week later because he realizes all he ever loved was making clogs and it is mind numbing to work at a place where estimates matter more than the clogs. Bobo&amp;rsquo;s manager is lauded for his top-grading efforts. Bobo starts his own clog shop across the street and starts selling his clogs for $150, still making a healthy profit. Bobo&amp;rsquo;s old clog shop can&amp;rsquo;t meet this new price without losing money per clog sold. Jobo&amp;rsquo;s manager, realizing the error of his ways and that there is no way he can compete with Bobo&amp;rsquo;s clog shop, murders Bobo and burns down his new shop. Jobo&amp;rsquo;s clog shop continues on for many years with a small but steady profit.&lt;/p&gt;
&lt;p&gt;It all seems so obvious in the world of clogs. But is software really much different or is it just harder to quantify the unit of production than in a world of widgets? It is often said that it is better to have an imperfect measure than no measure at all. But estimate accuracy isn&amp;rsquo;t an imperfect measure for software productivity, it is a completely orthogonal measure that actually drives down productivity. The only reason we are left with holding developers accountable to feature estimates is that their accuracy is necessary for some other purpose, such as the creation of project launch timelines or for cost-benefit analysis. I&amp;rsquo;ll tackle the flaws of these uses in my future posts.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>I&#39;m back and I hate your estimates</title>
      <link>http://localhost:1313/posts/i-hate-your-estimates/</link>
      <pubDate>Mon, 11 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/i-hate-your-estimates/</guid>
      <description>&lt;p&gt;For 2,000 years, ever since the Ancient Greeks got it into their heads that disease was caused by excess fluids, most disease in the western world was treated through bloodletting. Your back hurts? Let&amp;rsquo;s drain a quart of blood and see how you feel! Need to amputate your foot? Better drain some blood first. Was the practice scientifically baseless and actually harmful? Hell yes! There are today some cases where bloodletting is validly practiced, but it is no longer the panacea it once was. Effort estimation is software development&amp;rsquo;s version of bloodletting. Developers use effort estimates to drive accountability, to conduct cost-benefit analysis, to pack sprints, create launch timelines and, I believe in some circles, to summon the nine dark lords of hell.&lt;/p&gt;
&lt;p&gt;But why do we think effort estimates are the solution to all of these problems? Everything about effort estimates in software really is silly. Look at the homegrown rules we&amp;rsquo;ve come up with for estimates. I&amp;rsquo;ve heard more than one grizzled veteran tell me their preferred method is to take their initial estimate, double the number and up the unit of time (e.g., hour becomes day, day becomes week, etc.). This is always said in a semi-joking &amp;ldquo;but, no really, it works&amp;rdquo; tone.  In the 90s highly complicated methods of estimation became popular that involved lots of acronyms and I&amp;rsquo;m sure consultants. Now that agile has taken over the software industry we estimate using planning poker and Fibonacci numbers. The latest estimation technique is to sacrifice a goat and spread its entrails over a large area. Maybe that will finally be the trick that works, but I doubt it because as an industry, despite all these new techniques, we are still no better at estimating.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve invested quite a bit of time at getting better at estimation. And I got a little better. But one day, while knee deep in goat entrails, I stepped back and looked at the whole mess and asked why am I doing this? To what end do we estimate and then re-estimate, pack a schedule just to pack it differently in a month. And at the end of this introspection I determined my life of software estimation had all been a fraud. I&amp;rsquo;d been wasting my time. I moved to Nepal and joined a small temple. And now the secret of why I haven&amp;rsquo;t been working on my blog is out. But after years of meditation I&amp;rsquo;ve decided to come back to the material world and spread my gospel.&lt;/p&gt;
&lt;p&gt;And so, to demonstrate that effort estimates are not only useless but also harmful, I shall attack each motivation on its own. I will start next week with my least favorite reason of all&amp;hellip; accountability!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Just Say &#39;No&#39; To Boring Code</title>
      <link>http://localhost:1313/posts/just-say-no-to-boring-code/</link>
      <pubDate>Sun, 12 Apr 2009 22:51:32 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/just-say-no-to-boring-code/</guid>
      <description>&lt;p&gt;&lt;em&gt;Thanks to &lt;a href=&#34;http://www.cs.uchicago.edu/people/clklein&#34;&gt;Casey&lt;/a&gt; for inspiring this entry and for fighting the good fight against boring code.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I have extreme feelings of dissatisfaction with boring code. Boring code is monotonous and has a low signal to noise ratio. It takes a long time to communicate anything of value in boring code because most lines are dedicated to boilerplate. For example, according to a recent statistic I just made up, 95% of Java code consists of the following:&lt;/p&gt;
&lt;p&gt;int getBlah() {&lt;br&gt;
   return blah;&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;void setBlah(int blah) {&lt;br&gt;
   this.blah = blah;&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;String getSoBored() {&lt;br&gt;
   return soBored;&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;void setSoBored(String soBored) {&lt;br&gt;
  this.soBored = soBored;&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;In Ruby, this looks like:&lt;/p&gt;
&lt;p&gt;attr_accessor :blah, :soBored&lt;/p&gt;
&lt;p&gt;If you are using Java, a certain amount of this type of verbose code is just necessary. The far more insidious problem is that it trains developers into believing this type of pattern is a good thing. The best thing about Ruby and the functional programming communities is that the first point emphasized is that code should be concise and full of meat and if it isn&amp;rsquo;t you aren&amp;rsquo;t thinking hard enough. For instance, the Hello World program in Ruby:&lt;/p&gt;
&lt;p&gt;puts &amp;ldquo;Hello, World!&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Straight to the point. In Java, you are already entering the world of boilerplate thinking (from &lt;a href=&#34;http://java.sun.com/docs/books/tutorial/getStarted/application/index.html)&#34;&gt;http://java.sun.com/docs/books/tutorial/getStarted/application/index.html)&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;/**&lt;br&gt;
 * The HelloWorldApp class implements an application that&lt;br&gt;
 * simply displays &amp;ldquo;Hello World!&amp;rdquo; to the standard output.&lt;br&gt;
 */&lt;br&gt;
class HelloWorldApp {&lt;br&gt;
    public static void main(String[] args) {&lt;br&gt;
        System.out.println(&amp;ldquo;Hello World!&amp;rdquo;); //Display the string.&lt;br&gt;
    }&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;My knock here is not actually that Ruby or functional languages magically eliminate all boilerplate code, or that this extra overhead in these cases is really that painful. You can easily use a code generator for both of these situations and if this is the only boilerplate in your code you are doing pretty good. The problem is the Java community teaches its developers that all of their code should be at about this level of signal to noise.&lt;/p&gt;
&lt;p&gt;This is not an argument about aesthetics. Boring code is bad for precisely three reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Boring code is boring to read. Code is read far more than it is written. This means programmers coming in to modify your code are more likely to miss something and then make the wrong code change.&lt;/li&gt;
&lt;li&gt;Boring code is boring to review. A critical quality insurance practice in professional software development is code reviews. But boring code is boring to review. If you write boring code, it is far more likely the reviewer will just go &amp;lsquo;yadda yadda yadda looks good to me&amp;rsquo; and gloss over mistakes.&lt;/li&gt;
&lt;li&gt;Boring code is boring. Come on, do you really want to be boring?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The only thing worse than boring code is &lt;a href=&#34;http://www.bonnycode.com/guide/2008/11/in-defense-of-duplicated-code.html&#34;&gt;magic code&lt;/a&gt;. Stick to the exciting, elegant, simple code, believe me you&amp;rsquo;ll sleep better at night if you do.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Software is not like Dirt</title>
      <link>http://localhost:1313/posts/software-is-not-like-dirt/</link>
      <pubDate>Sun, 01 Mar 2009 22:37:49 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/software-is-not-like-dirt/</guid>
      <description>&lt;p&gt;Metaphors are way too overused when people talk about software development. The process of creating software has been compared to building a house, planning a city, growing a garden and creating new life (think Dr. Frankenstein, not boom chiki wow wow). Software can look like spaghetti (yum!) or it can be as elegant as Audrey Hepburn in My Fair Lady. I promise not to add to this mess anymore than I already have with &lt;a href=&#34;http://www.bonnycode.com/guide/2008/11/in-defense-of-duplicated-code.html&#34;&gt;good King DRY&lt;/a&gt; by throwing more metaphors in the mix.&lt;/p&gt;
&lt;p&gt;Instead, I wish to cast away the most evil of metaphors: that software is like dirt and that software is like trying to make the biggest pile of dirt you possibly can. Now I can tell you as someone who has experience both in software development and who has created big piles of dirt on beaches, in backyards and in wooded areas that they are nothing alike.&lt;/p&gt;
&lt;p&gt;The first difference is you can easily estimate with some precision how long it will take to make your pile of dirt. Imagine having 10 years experience making piles of dirt and you still have some dirt piling projects that you misestimate by a factor of 2. It just doesn&amp;rsquo;t happen. Or imagine you are managing a team of dirt pilers and it looks like they are 90% done piling their dirt but then it turns out they are only half done. Or even worse, in your team of dirt pilers, there is this one guy that is unknowingly working against the rest of the team and accidently putting the dirt back in the hole without even knowing it. Or the more people you put piling up the dirt, the slower and slower everyone seems to go. These things don&amp;rsquo;t happen when making piles of dirt, but they all happen when making software.&lt;/p&gt;
&lt;p&gt;The second difference is that when you make a pile of dirt you have a clear understanding of your goal as you work, but when making software the entire process is about understanding what you are trying to build. I make piles of dirt mostly because it is fun, that is my goal. With software though, you only understand what you are trying to build when you have finished building it. When I make a pile of dirt I come up with a plan, I will take either a shovel, a spoon, or my hands and start digging out dirt and put it in a pile. If dirt were like software, the ground would be magically turning into marshmallows, dingoes and molten lava every time the shovel hit the ground, requiring you to come up with new plans of attack at every step.&lt;/p&gt;
&lt;p&gt;Creating software isn&amp;rsquo;t like piling dirt. It isn&amp;rsquo;t like building a house, a bridge, a baby or any other physical thing. And that is because there is no construction phase to software development. All of software development is design. That is the fundamental problem with all of these metaphors and why they can lead to the wrong conclusions.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Timeless Way of Coding</title>
      <link>http://localhost:1313/posts/a-timeless-way-of-coding/</link>
      <pubDate>Sun, 22 Feb 2009 22:51:50 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/a-timeless-way-of-coding/</guid>
      <description>&lt;p&gt;What do the Macarena and the GoF&amp;rsquo;s &lt;a href=&#34;http://www.amazon.com/Design-Patterns-Object-Oriented-Addison-Wesley-Professional/dp/0201633612/&#34;&gt;Design Patterns&lt;/a&gt; have in common? They all became wildly popular in 1995 but in the following years experienced a large backlash from overexposure. There have been many arguments against Design Patterns as practiced in software development, chiefly that they promote over complicated code and that they really just paper over what should be seen as core deficiencies in mainstream object oriented languages.&lt;/p&gt;
&lt;p&gt;The original inspiration for the design patterns movement in software was Christopher Alexander&amp;rsquo;s &lt;a href=&#34;http://www.amazon.com/Timeless-Way-Building-Christopher-Alexander/dp/0195024028/&#34;&gt;The Timeless Way of Building&lt;/a&gt;. Somewhere from Christopher Alexander&amp;rsquo;s original text to the software industries adoption of design patterns, the very soul of his meaning was left behind. Envision for a moment the stereotype of a hard core believer in software design patterns. Their code is designed all up front using UML and every class is named after one design pattern or another. Often times even multiple of them, such as the FooBarStrategyAbstractFactorySingleton. They create big inorganic design, suitable to distinct job roles where one can be an architect that doesn&amp;rsquo;t design, a designer who doesn&amp;rsquo;t code and a coder who does as they are told.&lt;/p&gt;
&lt;p&gt;The spirit of the timeless way of building is to evoke that quality without a name. Some buildings are just lifeless, cold and somehow wrong. Others have a cozy liveliness that just feels comfortable and right. To obtain the quality without a name, one has to look at how such designs organically arose and the micro principles and patterns they applied. The centrally planned cities, strip malls and cookie cutter suburban homes all lack this organically grown life.&lt;/p&gt;
&lt;p&gt;This is the central problem with how design patterns are applied. They are used to dictate design as if it is something that can be rigorously planned rather than something that is adapted to. This is why so much enterprise code feels so bloated and lifeless, it lacks the natural flow and elegance of code that is designed to fit a specific problem rather than trying to fit into a wholly consistent uber architecture.&lt;/p&gt;
&lt;p&gt;How does a developer achieve that quality without a name though? No one intends to write bad lifeless code and please don&amp;rsquo;t tell me this is just a problem for &lt;a href=&#34;http://www.bonnycode.com/guide/2008/12/the-bad-programmer.html&#34;&gt;bad programmers&lt;/a&gt;. I&amp;rsquo;d like to know what people think. Have you ever written code that was great and had that quality without a name, not only at initial conception, but actually got better and more elegant over time? How did you do it? What about code that you thought was great at first, but quickly showed its age as the requirements shifted? What went wrong?&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
